/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.lamin.lamin_api_client.api;

import ai.lamin.lamin_api_client.ApiException;
import ai.lamin.lamin_api_client.model.AddCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.AddSpaceCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.AddTeamMemberRequestBody;
import ai.lamin.lamin_api_client.model.AttachSpaceToRecordRequestBody;
import ai.lamin.lamin_api_client.model.CreateSpaceRequestBody;
import ai.lamin.lamin_api_client.model.CreateTeamRequestBody;
import ai.lamin.lamin_api_client.model.DbUrlRequest;
import ai.lamin.lamin_api_client.model.GetRecordRequestBody;
import ai.lamin.lamin_api_client.model.GetRecordsRequestBody;
import ai.lamin.lamin_api_client.model.GetValuesRequestBody;
import ai.lamin.lamin_api_client.model.GroupByRequestBody;
import ai.lamin.lamin_api_client.model.HTTPValidationError;
import ai.lamin.lamin_api_client.model.RegisterDbServerBody;
import ai.lamin.lamin_api_client.model.RegisterFormRequest;
import ai.lamin.lamin_api_client.model.S3PermissionsRequest;
import java.util.UUID;
import ai.lamin.lamin_api_client.model.UpdateCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.UpdateSpaceCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.UpdateSpaceRequestBody;
import ai.lamin.lamin_api_client.model.UpdateTeamMemberRequestBody;
import ai.lamin.lamin_api_client.model.UpdateTeamRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Add Collaborator
     *
     * Add a collaborator (account or team) to an instance.  Parameters: - **instance_id**: UUID of the instance to add the collaborator to (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **409**: Collaborator was already added  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutTest() throws ApiException {
        UUID instanceId = null;
        AddCollaboratorRequestBody addCollaboratorRequestBody = null;
        String authorization = null;
        Object response = api.addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPut(instanceId, addCollaboratorRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Add Collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutTest() throws ApiException {
        UUID instanceId = null;
        UUID accountId = null;
        UUID schemaId = null;
        String role = null;
        String authorization = null;
        Object response = api.addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut(instanceId, accountId, schemaId, role, authorization);
        // TODO: test validations
    }

    /**
     * Add Space Collaborator
     *
     * Add a collaborator (account or team) to a space.  Parameters: - **space_id**: ID of the space to add the collaborator to - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added to space successfully - **400**: Invalid input (e.g., both account_id and team_id provided)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutTest() throws ApiException {
        UUID spaceId = null;
        AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody = null;
        String authorization = null;
        Object response = api.addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPut(spaceId, addSpaceCollaboratorRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Add Team Member
     *
     * Add a member to a team.  Parameters: - **team_id**: UUID of the team to add the member to - **account_id**: UUID of the account to add as a member - **body**: Request body containing member details   - **role**: Role of the member in the team  Returns: - **201**: Team member added successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutTest() throws ApiException {
        UUID teamId = null;
        UUID accountId = null;
        AddTeamMemberRequestBody addTeamMemberRequestBody = null;
        String authorization = null;
        Object response = api.addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut(teamId, accountId, addTeamMemberRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Attach Label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        Integer id = null;
        String labelField = null;
        Integer labelId = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Attach Space To Instance
     *
     * Attach a space to a specific instance.  Parameters: - **space_id**: ID of the space to attach - **instance_id**: UUID of the instance to attach the space to (from URL path)  Returns: - **200**: Space attached to instance successfully  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutTest() throws ApiException {
        UUID spaceId = null;
        UUID instanceId = null;
        String authorization = null;
        Object response = api.attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPut(spaceId, instanceId, authorization);
        // TODO: test validations
    }

    /**
     * Check Db Access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkDbAccessDebugDbAccessPostTest() throws ApiException {
        DbUrlRequest dbUrlRequest = null;
        Object response = api.checkDbAccessDebugDbAccessPost(dbUrlRequest);
        // TODO: test validations
    }

    /**
     * Check Db Server Access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkDbServerAccessDbServerCheckAccessPostTest() throws ApiException {
        String name = null;
        String authorization = null;
        Object response = api.checkDbServerAccessDbServerCheckAccessPost(name, authorization);
        // TODO: test validations
    }

    /**
     * Create Instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstanceInstancesPutTest() throws ApiException {
        String name = null;
        String storage = null;
        String schemaStr = null;
        String dbServerKey = null;
        String authorization = null;
        Object response = api.createInstanceInstancesPut(name, storage, schemaStr, dbServerKey, authorization);
        // TODO: test validations
    }

    /**
     * Create Record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecordInstancesInstanceIdModulesModuleNameModelNamePutTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        UUID instanceId = null;
        Object body = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.createRecordInstancesInstanceIdModulesModuleNameModelNamePut(moduleName, modelName, instanceId, body, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Create Space
     *
     * Create a new space.  Parameters: - **body**: Request body containing space details   - **name**: Name of the space   - **organization_id**: UUID of the organization   - **description**: Optional description of the space  Returns: - **201**: Space created successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceAccessV2SpacesPutTest() throws ApiException {
        CreateSpaceRequestBody createSpaceRequestBody = null;
        String authorization = null;
        Object response = api.createSpaceAccessV2SpacesPut(createSpaceRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Create Team
     *
     * Create a new team.  Parameters: - **body**: Request body containing team details   - **name**: Name of the team   - **organization_id**: UUID of the organization   - **description**: Optional description of the team  Returns: - **201**: Team created successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamAccessV2TeamsPutTest() throws ApiException {
        CreateTeamRequestBody createTeamRequestBody = null;
        String authorization = null;
        Object response = api.createTeamAccessV2TeamsPut(createTeamRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Delete Collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteTest() throws ApiException {
        UUID instanceId = null;
        UUID accountId = null;
        String authorization = null;
        Object response = api.deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDelete(instanceId, accountId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceInstancesInstanceIdDeleteTest() throws ApiException {
        UUID instanceId = null;
        String instanceName = null;
        String authorization = null;
        Object response = api.deleteInstanceInstancesInstanceIdDelete(instanceId, instanceName, authorization);
        // TODO: test validations
    }

    /**
     * Delete Record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        String uid = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(moduleName, modelName, uid, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Space
     *
     * Delete a space and detach it from the instance.  Parameters: - **space_id**: ID of the space to delete  Returns: - **200**: Space deleted successfully - **404**: Space not found
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceAccessV2SpacesSpaceIdDeleteTest() throws ApiException {
        UUID spaceId = null;
        String authorization = null;
        Object response = api.deleteSpaceAccessV2SpacesSpaceIdDelete(spaceId, authorization);
        // TODO: test validations
    }

    /**
     * Delete Team
     *
     * Delete a team.  Parameters: - **team_id**: UUID of the team to delete  Returns: - **200**: Team deleted successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTeamAccessV2TeamsTeamIdDeleteTest() throws ApiException {
        UUID teamId = null;
        String authorization = null;
        Object response = api.deleteTeamAccessV2TeamsTeamIdDelete(teamId, authorization);
        // TODO: test validations
    }

    /**
     * Detach Label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        Integer id = null;
        String labelField = null;
        Integer labelId = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Detach Space From Instance
     *
     * Detach a space from a specific instance.  Parameters: - **space_id**: ID of the space to detach - **instance_id**: UUID of the instance to detach the space from (from URL path)  Returns: - **200**: Space detached from instance successfully  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteTest() throws ApiException {
        UUID spaceId = null;
        UUID instanceId = null;
        String authorization = null;
        Object response = api.detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDelete(spaceId, instanceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Db Token
     *
     * Get a database token for the specified instance.  This token can be used to authenticate with the instance&#39;s database.  Parameters: - **instance_id**: UUID of the instance to get the token for (from URL path)  Returns: - **200**: Database token retrieved successfully   - **token**: The database token - **401**: Unauthorized
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDbTokenAccessV2InstancesInstanceIdDbTokenGetTest() throws ApiException {
        UUID instanceId = null;
        String authorization = null;
        Object response = api.getDbTokenAccessV2InstancesInstanceIdDbTokenGet(instanceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Instance Statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceStatisticsInstancesInstanceIdStatisticsGetTest() throws ApiException {
        UUID instanceId = null;
        List<String> q = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.getInstanceStatisticsInstancesInstanceIdStatisticsGet(instanceId, q, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Get Ip
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIpDebugIpGetTest() throws ApiException {
        Object response = api.getIpDebugIpGet();
        // TODO: test validations
    }

    /**
     * Get Non Empty Tables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetTest() throws ApiException {
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGet(instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Get Record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        String idOrUid = null;
        UUID instanceId = null;
        Integer limitToMany = null;
        Boolean includeForeignKeys = null;
        UUID schemaId = null;
        String authorization = null;
        GetRecordRequestBody getRecordRequestBody = null;
        Object response = api.getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(moduleName, modelName, idOrUid, instanceId, limitToMany, includeForeignKeys, schemaId, authorization, getRecordRequestBody);
        // TODO: test validations
    }

    /**
     * Get Records
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordsInstancesInstanceIdModulesModuleNameModelNamePostTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        UUID instanceId = null;
        Integer limit = null;
        Integer offset = null;
        Integer limitToMany = null;
        Boolean includeForeignKeys = null;
        UUID schemaId = null;
        String authorization = null;
        GetRecordsRequestBody getRecordsRequestBody = null;
        Object response = api.getRecordsInstancesInstanceIdModulesModuleNameModelNamePost(moduleName, modelName, instanceId, limit, offset, limitToMany, includeForeignKeys, schemaId, authorization, getRecordsRequestBody);
        // TODO: test validations
    }

    /**
     * Get Relation Counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        Integer id = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(moduleName, modelName, id, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Get Relations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        UUID instanceId = null;
        String authorization = null;
        Object response = api.getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet(moduleName, modelName, instanceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaInstancesInstanceIdSchemaGetTest() throws ApiException {
        UUID instanceId = null;
        String authorization = null;
        Object response = api.getSchemaInstancesInstanceIdSchemaGet(instanceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Space
     *
     * Get details of a specific space.  Parameters: - **space_id**: ID of the space to retrieve  Returns: - **200**: Space details retrieved successfully - **404**: Space not found
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceAccessV2SpacesSpaceIdGetTest() throws ApiException {
        UUID spaceId = null;
        String authorization = null;
        Object response = api.getSpaceAccessV2SpacesSpaceIdGet(spaceId, authorization);
        // TODO: test validations
    }

    /**
     * Get Team
     *
     * Get details of a specific team.  Parameters: - **team_id**: UUID of the team to retrieve  Returns: - **200**: Team details retrieved successfully - **404**: Team not found
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamAccessV2TeamsTeamIdGetTest() throws ApiException {
        UUID teamId = null;
        String authorization = null;
        Object response = api.getTeamAccessV2TeamsTeamIdGet(teamId, authorization);
        // TODO: test validations
    }

    /**
     * Get Tree
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTreeInstancesInstanceIdTreeGetTest() throws ApiException {
        UUID instanceId = null;
        String entityType = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.getTreeInstancesInstanceIdTreeGet(instanceId, entityType, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Get Values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        String fieldPath = null;
        UUID instanceId = null;
        Integer limit = null;
        Integer offset = null;
        UUID schemaId = null;
        String authorization = null;
        GetValuesRequestBody getValuesRequestBody = null;
        Object response = api.getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(moduleName, modelName, fieldPath, instanceId, limit, offset, schemaId, authorization, getValuesRequestBody);
        // TODO: test validations
    }

    /**
     * Grant S3 Permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantS3PermissionsStoragesS3BucketNamePermissionsPutTest() throws ApiException {
        String bucketName = null;
        S3PermissionsRequest s3PermissionsRequest = null;
        String awsAccountId = null;
        String awsUserName = null;
        String authorization = null;
        Object response = api.grantS3PermissionsStoragesS3BucketNamePermissionsPut(bucketName, s3PermissionsRequest, awsAccountId, awsUserName, authorization);
        // TODO: test validations
    }

    /**
     * Group By
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        UUID instanceId = null;
        GroupByRequestBody groupByRequestBody = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(moduleName, modelName, instanceId, groupByRequestBody, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * List Collaborators
     *
     * List all collaborators of an instance.  Parameters: - **instance_id**: UUID of the instance to list collaborators for (from URL path)  Returns: - **200**: List of instance collaborators retrieved successfully  Requires read access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetTest() throws ApiException {
        UUID instanceId = null;
        String authorization = null;
        Object response = api.listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGet(instanceId, authorization);
        // TODO: test validations
    }

    /**
     * List Directory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDirectoryInstancesInstanceIdEntityTypeGetTest() throws ApiException {
        String entityType = null;
        UUID instanceId = null;
        String path = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.listDirectoryInstancesInstanceIdEntityTypeGet(entityType, instanceId, path, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * List Instance Spaces
     *
     * List all spaces attached to an instance.  Parameters: - **instance_id**: UUID of the instance to list spaces for (from URL path)  Returns: - **200**: List of spaces attached to the instance retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetTest() throws ApiException {
        UUID instanceId = null;
        String authorization = null;
        Object response = api.listInstanceSpacesAccessV2SpacesInstancesInstanceIdGet(instanceId, authorization);
        // TODO: test validations
    }

    /**
     * List Instances Using Space
     *
     * List all instances that have this space attached.  Parameters: - **space_id**: ID of the space to check  Returns: - **200**: List of instances using the space retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetTest() throws ApiException {
        UUID spaceId = null;
        String authorization = null;
        Object response = api.listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGet(spaceId, authorization);
        // TODO: test validations
    }

    /**
     * List Organization Spaces
     *
     * List all spaces in an organization.  Parameters: - **organization_id**: UUID of the organization to list spaces for  Returns: - **200**: List of spaces retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetTest() throws ApiException {
        UUID organizationId = null;
        String authorization = null;
        Object response = api.listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGet(organizationId, authorization);
        // TODO: test validations
    }

    /**
     * List Organization Teams
     *
     * List all teams in an organization.  Parameters: - **organization_id**: UUID of the organization to list teams for  Returns: - **200**: List of teams retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetTest() throws ApiException {
        UUID organizationId = null;
        String authorization = null;
        Object response = api.listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGet(organizationId, authorization);
        // TODO: test validations
    }

    /**
     * List Space Collaborators
     *
     * List all collaborators of a space.  Parameters: - **space_id**: ID of the space to list collaborators for  Returns: - **200**: List of space collaborators retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetTest() throws ApiException {
        UUID spaceId = null;
        String authorization = null;
        Object response = api.listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGet(spaceId, authorization);
        // TODO: test validations
    }

    /**
     * List Team Members
     *
     * List all members of a team.  Parameters: - **team_id**: UUID of the team to list members for  Returns: - **200**: List of team members retrieved successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamMembersAccessV2TeamsTeamIdMembersGetTest() throws ApiException {
        UUID teamId = null;
        String authorization = null;
        Object response = api.listTeamMembersAccessV2TeamsTeamIdMembersGet(teamId, authorization);
        // TODO: test validations
    }

    /**
     * Move Record To Space
     *
     * Move a record to a specific space.  Parameters: - **space_id**: ID of the space to move the record to - **body**: Request body containing record details   - **module_name**: Module name of the record   - **model_name**: Model name of the record   - **record_id**: ID of the record to move in the space - **instance_id**: UUID of the instance (from URL path) - **schema_id**: UUID of the schema (from URL path)  Returns: - **200**: Record moved to the space successfully  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutTest() throws ApiException {
        Integer instanceDbSpaceId = null;
        AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPut(instanceDbSpaceId, attachSpaceToRecordRequestBody, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Proxy S3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proxyS3S3PathGetTest() throws ApiException {
        String path = null;
        Object response = api.proxyS3S3PathGet(path);
        // TODO: test validations
    }

    /**
     * Proxy S3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proxyS3S3PathGet_0Test() throws ApiException {
        String path = null;
        Object response = api.proxyS3S3PathGet_0(path);
        // TODO: test validations
    }

    /**
     * Proxy S3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proxyS3S3PathGet_1Test() throws ApiException {
        String path = null;
        Object response = api.proxyS3S3PathGet_1(path);
        // TODO: test validations
    }

    /**
     * Proxy S3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proxyS3S3PathGet_2Test() throws ApiException {
        String path = null;
        Object response = api.proxyS3S3PathGet_2(path);
        // TODO: test validations
    }

    /**
     * Proxy S3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proxyS3S3PathGet_3Test() throws ApiException {
        String path = null;
        Object response = api.proxyS3S3PathGet_3(path);
        // TODO: test validations
    }

    /**
     * Register Db Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerDbServerDbServerRegisterPostTest() throws ApiException {
        RegisterDbServerBody registerDbServerBody = null;
        String authorization = null;
        Object response = api.registerDbServerDbServerRegisterPost(registerDbServerBody, authorization);
        // TODO: test validations
    }

    /**
     * Register Form
     *
     * Register a form for a specific instance.  Parameters: - **body**: Request body containing form details   - **key**: Key of the form   - **data**: Form data   - **schema_uid**: UID of the schema  Returns: - **201**: Form registered successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerFormInstancesInstanceIdFormsPostTest() throws ApiException {
        UUID instanceId = null;
        RegisterFormRequest registerFormRequest = null;
        String authorization = null;
        Object response = api.registerFormInstancesInstanceIdFormsPost(instanceId, registerFormRequest, authorization);
        // TODO: test validations
    }

    /**
     * Remove Collaborator
     *
     * Remove a collaborator from an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteTest() throws ApiException {
        UUID instanceId = null;
        UUID accountId = null;
        UUID teamId = null;
        String authorization = null;
        Object response = api.removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDelete(instanceId, accountId, teamId, authorization);
        // TODO: test validations
    }

    /**
     * Remove Space Collaborator
     *
     * Remove a collaborator (account or team) from a space.  Parameters: - **space_id**: ID of the space to remove the collaborator from - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed from space successfully - **400**: Invalid input (e.g., both account_id and team_id provided or neither provided)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteTest() throws ApiException {
        UUID spaceId = null;
        UUID accountId = null;
        UUID teamId = null;
        String authorization = null;
        Object response = api.removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDelete(spaceId, accountId, teamId, authorization);
        // TODO: test validations
    }

    /**
     * Remove Team Member
     *
     * Remove a member from a team.  Parameters: - **team_id**: UUID of the team to remove the member from - **account_id**: UUID of the account to remove from the team  Returns: - **200**: Team member removed successfully - **404**: Member not found in team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteTest() throws ApiException {
        UUID teamId = null;
        UUID accountId = null;
        String authorization = null;
        Object response = api.removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDelete(teamId, accountId, authorization);
        // TODO: test validations
    }

    /**
     * Transfer Ownership
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferOwnershipInstancesInstanceIdOwnerHandlePatchTest() throws ApiException {
        String handle = null;
        UUID instanceId = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.transferOwnershipInstancesInstanceIdOwnerHandlePatch(handle, instanceId, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Update Collaborator
     *
     * Update a collaborator&#39;s permissions on an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchTest() throws ApiException {
        UUID instanceId = null;
        UpdateCollaboratorRequestBody updateCollaboratorRequestBody = null;
        String authorization = null;
        Object response = api.updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatch(instanceId, updateCollaboratorRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Update Collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchTest() throws ApiException {
        UUID instanceId = null;
        UUID accountId = null;
        String role = null;
        String authorization = null;
        Object response = api.updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch(instanceId, accountId, role, authorization);
        // TODO: test validations
    }

    /**
     * Update Record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchTest() throws ApiException {
        String moduleName = null;
        String modelName = null;
        String uid = null;
        UUID instanceId = null;
        Object body = null;
        UUID schemaId = null;
        String authorization = null;
        Object response = api.updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(moduleName, modelName, uid, instanceId, body, schemaId, authorization);
        // TODO: test validations
    }

    /**
     * Update Space
     *
     * Update a space&#39;s details.  Parameters: - **space_id**: ID of the space to update - **body**: Request body containing updated space details   - **name**: Optional new name for the space   - **description**: Optional new description for the space  Returns: - **200**: Space updated successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceAccessV2SpacesSpaceIdPatchTest() throws ApiException {
        UUID spaceId = null;
        UpdateSpaceRequestBody updateSpaceRequestBody = null;
        String authorization = null;
        Object response = api.updateSpaceAccessV2SpacesSpaceIdPatch(spaceId, updateSpaceRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Update Space Collaborator
     *
     * Update a collaborator&#39;s permissions in a space.  Parameters: - **space_id**: ID of the space to update the collaborator in - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **404**: Collaborator not found in space
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchTest() throws ApiException {
        UUID spaceId = null;
        UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody = null;
        String authorization = null;
        Object response = api.updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatch(spaceId, updateSpaceCollaboratorRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Update Team
     *
     * Update a team&#39;s details.  Parameters: - **team_id**: UUID of the team to update - **body**: Request body containing updated team details   - **name**: Optional new name for the team   - **description**: Optional new description for the team  Returns: - **200**: Team updated successfully
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamAccessV2TeamsTeamIdPatchTest() throws ApiException {
        UUID teamId = null;
        UpdateTeamRequestBody updateTeamRequestBody = null;
        String authorization = null;
        Object response = api.updateTeamAccessV2TeamsTeamIdPatch(teamId, updateTeamRequestBody, authorization);
        // TODO: test validations
    }

    /**
     * Update Team Member
     *
     * Update a team member&#39;s details.  Parameters: - **team_id**: UUID of the team the member belongs to - **account_id**: UUID of the account to update - **body**: Request body containing updated member details   - **role**: Role of the member in the team  Returns: - **200**: Team member updated successfully - **404**: Member not found in team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchTest() throws ApiException {
        UUID teamId = null;
        UUID accountId = null;
        UpdateTeamMemberRequestBody updateTeamMemberRequestBody = null;
        String authorization = null;
        Object response = api.updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch(teamId, accountId, updateTeamMemberRequestBody, authorization);
        // TODO: test validations
    }

}
