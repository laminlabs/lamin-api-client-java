/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.lamin.lamin_api_client.api;

import ai.lamin.lamin_api_client.ApiCallback;
import ai.lamin.lamin_api_client.ApiClient;
import ai.lamin.lamin_api_client.ApiException;
import ai.lamin.lamin_api_client.ApiResponse;
import ai.lamin.lamin_api_client.Configuration;
import ai.lamin.lamin_api_client.Pair;
import ai.lamin.lamin_api_client.ProgressRequestBody;
import ai.lamin.lamin_api_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ai.lamin.lamin_api_client.model.AddCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.AddSpaceCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.AddTeamMemberRequestBody;
import ai.lamin.lamin_api_client.model.AttachSpaceToRecordRequestBody;
import ai.lamin.lamin_api_client.model.CreateSpaceRequestBody;
import ai.lamin.lamin_api_client.model.CreateTeamRequestBody;
import ai.lamin.lamin_api_client.model.DbUrlRequest;
import ai.lamin.lamin_api_client.model.GetRecordRequestBody;
import ai.lamin.lamin_api_client.model.GetRecordsRequestBody;
import ai.lamin.lamin_api_client.model.GetValuesRequestBody;
import ai.lamin.lamin_api_client.model.GroupByRequestBody;
import ai.lamin.lamin_api_client.model.HTTPValidationError;
import ai.lamin.lamin_api_client.model.RegisterDbServerBody;
import ai.lamin.lamin_api_client.model.RegisterFormRequest;
import ai.lamin.lamin_api_client.model.S3PermissionsRequest;
import java.util.UUID;
import ai.lamin.lamin_api_client.model.UpdateCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.UpdateSpaceCollaboratorRequestBody;
import ai.lamin.lamin_api_client.model.UpdateSpaceRequestBody;
import ai.lamin.lamin_api_client.model.UpdateTeamMemberRequestBody;
import ai.lamin.lamin_api_client.model.UpdateTeamRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPut
     * @param instanceId  (required)
     * @param addCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutCall(UUID instanceId, AddCollaboratorRequestBody addCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCollaboratorRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/instances/{instance_id}/collaborators"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutValidateBeforeCall(UUID instanceId, AddCollaboratorRequestBody addCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPut(Async)");
        }

        // verify the required parameter 'addCollaboratorRequestBody' is set
        if (addCollaboratorRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addCollaboratorRequestBody' when calling addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPut(Async)");
        }

        return addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutCall(instanceId, addCollaboratorRequestBody, authorization, _callback);

    }

    /**
     * Add Collaborator
     * Add a collaborator (account or team) to an instance.  Parameters: - **instance_id**: UUID of the instance to add the collaborator to (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **409**: Collaborator was already added  Requires admin access to the instance
     * @param instanceId  (required)
     * @param addCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPut(UUID instanceId, AddCollaboratorRequestBody addCollaboratorRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutWithHttpInfo(instanceId, addCollaboratorRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Add Collaborator
     * Add a collaborator (account or team) to an instance.  Parameters: - **instance_id**: UUID of the instance to add the collaborator to (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **409**: Collaborator was already added  Requires admin access to the instance
     * @param instanceId  (required)
     * @param addCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutWithHttpInfo(UUID instanceId, AddCollaboratorRequestBody addCollaboratorRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutValidateBeforeCall(instanceId, addCollaboratorRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Collaborator (asynchronously)
     * Add a collaborator (account or team) to an instance.  Parameters: - **instance_id**: UUID of the instance to add the collaborator to (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **409**: Collaborator was already added  Requires admin access to the instance
     * @param instanceId  (required)
     * @param addCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutAsync(UUID instanceId, AddCollaboratorRequestBody addCollaboratorRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollaboratorAccessV2InstancesInstanceIdCollaboratorsPutValidateBeforeCall(instanceId, addCollaboratorRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param schemaId  (required)
     * @param role  (optional, default to read)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutCall(UUID instanceId, UUID accountId, UUID schemaId, String role, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/collaborators/{account_id}"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutValidateBeforeCall(UUID instanceId, UUID accountId, UUID schemaId, String role, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut(Async)");
        }

        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut(Async)");
        }

        return addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutCall(instanceId, accountId, schemaId, role, authorization, _callback);

    }

    /**
     * Add Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param schemaId  (required)
     * @param role  (optional, default to read)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPut(UUID instanceId, UUID accountId, UUID schemaId, String role, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutWithHttpInfo(instanceId, accountId, schemaId, role, authorization);
        return localVarResp.getData();
    }

    /**
     * Add Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param schemaId  (required)
     * @param role  (optional, default to read)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutWithHttpInfo(UUID instanceId, UUID accountId, UUID schemaId, String role, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutValidateBeforeCall(instanceId, accountId, schemaId, role, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Collaborator (asynchronously)
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param schemaId  (required)
     * @param role  (optional, default to read)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutAsync(UUID instanceId, UUID accountId, UUID schemaId, String role, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCollaboratorInstancesInstanceIdCollaboratorsAccountIdPutValidateBeforeCall(instanceId, accountId, schemaId, role, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPut
     * @param spaceId  (required)
     * @param addSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutCall(UUID spaceId, AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSpaceCollaboratorRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/collaborators"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutValidateBeforeCall(UUID spaceId, AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPut(Async)");
        }

        // verify the required parameter 'addSpaceCollaboratorRequestBody' is set
        if (addSpaceCollaboratorRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addSpaceCollaboratorRequestBody' when calling addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPut(Async)");
        }

        return addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutCall(spaceId, addSpaceCollaboratorRequestBody, authorization, _callback);

    }

    /**
     * Add Space Collaborator
     * Add a collaborator (account or team) to a space.  Parameters: - **space_id**: ID of the space to add the collaborator to - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added to space successfully - **400**: Invalid input (e.g., both account_id and team_id provided)
     * @param spaceId  (required)
     * @param addSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPut(UUID spaceId, AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutWithHttpInfo(spaceId, addSpaceCollaboratorRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Add Space Collaborator
     * Add a collaborator (account or team) to a space.  Parameters: - **space_id**: ID of the space to add the collaborator to - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added to space successfully - **400**: Invalid input (e.g., both account_id and team_id provided)
     * @param spaceId  (required)
     * @param addSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutWithHttpInfo(UUID spaceId, AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutValidateBeforeCall(spaceId, addSpaceCollaboratorRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Space Collaborator (asynchronously)
     * Add a collaborator (account or team) to a space.  Parameters: - **space_id**: ID of the space to add the collaborator to - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to add (mutually exclusive with team_id)   - **team_id**: UUID of the team to add (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **201**: Collaborator added to space successfully - **400**: Invalid input (e.g., both account_id and team_id provided)
     * @param spaceId  (required)
     * @param addSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutAsync(UUID spaceId, AddSpaceCollaboratorRequestBody addSpaceCollaboratorRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPutValidateBeforeCall(spaceId, addSpaceCollaboratorRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut
     * @param teamId  (required)
     * @param accountId  (required)
     * @param addTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutCall(UUID teamId, UUID accountId, AddTeamMemberRequestBody addTeamMemberRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTeamMemberRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}/members/{account_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutValidateBeforeCall(UUID teamId, UUID accountId, AddTeamMemberRequestBody addTeamMemberRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut(Async)");
        }

        // verify the required parameter 'addTeamMemberRequestBody' is set
        if (addTeamMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'addTeamMemberRequestBody' when calling addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut(Async)");
        }

        return addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutCall(teamId, accountId, addTeamMemberRequestBody, authorization, _callback);

    }

    /**
     * Add Team Member
     * Add a member to a team.  Parameters: - **team_id**: UUID of the team to add the member to - **account_id**: UUID of the account to add as a member - **body**: Request body containing member details   - **role**: Role of the member in the team  Returns: - **201**: Team member added successfully
     * @param teamId  (required)
     * @param accountId  (required)
     * @param addTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPut(UUID teamId, UUID accountId, AddTeamMemberRequestBody addTeamMemberRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutWithHttpInfo(teamId, accountId, addTeamMemberRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Add Team Member
     * Add a member to a team.  Parameters: - **team_id**: UUID of the team to add the member to - **account_id**: UUID of the account to add as a member - **body**: Request body containing member details   - **role**: Role of the member in the team  Returns: - **201**: Team member added successfully
     * @param teamId  (required)
     * @param accountId  (required)
     * @param addTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutWithHttpInfo(UUID teamId, UUID accountId, AddTeamMemberRequestBody addTeamMemberRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutValidateBeforeCall(teamId, accountId, addTeamMemberRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Team Member (asynchronously)
     * Add a member to a team.  Parameters: - **team_id**: UUID of the team to add the member to - **account_id**: UUID of the account to add as a member - **body**: Request body containing member details   - **role**: Role of the member in the team  Returns: - **201**: Team member added successfully
     * @param teamId  (required)
     * @param accountId  (required)
     * @param addTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutAsync(UUID teamId, UUID accountId, AddTeamMemberRequestBody addTeamMemberRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTeamMemberAccessV2TeamsTeamIdMembersAccountIdPutValidateBeforeCall(teamId, accountId, addTeamMemberRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutCall(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{id}/{label_field}/{label_id}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "label_field" + "}", localVarApiClient.escapeString(labelField.toString()))
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutValidateBeforeCall(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        // verify the required parameter 'labelField' is set
        if (labelField == null) {
            throw new ApiException("Missing the required parameter 'labelField' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(Async)");
        }

        return attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Attach Label
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPut(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutWithHttpInfo(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Attach Label
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutWithHttpInfo(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutValidateBeforeCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach Label (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutAsync(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdPutValidateBeforeCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPut
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutCall(UUID spaceId, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/instances/{instance_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutValidateBeforeCall(UUID spaceId, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPut(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPut(Async)");
        }

        return attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutCall(spaceId, instanceId, authorization, _callback);

    }

    /**
     * Attach Space To Instance
     * Attach a space to a specific instance.  Parameters: - **space_id**: ID of the space to attach - **instance_id**: UUID of the instance to attach the space to (from URL path)  Returns: - **200**: Space attached to instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPut(UUID spaceId, UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutWithHttpInfo(spaceId, instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Attach Space To Instance
     * Attach a space to a specific instance.  Parameters: - **space_id**: ID of the space to attach - **instance_id**: UUID of the instance to attach the space to (from URL path)  Returns: - **200**: Space attached to instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutWithHttpInfo(UUID spaceId, UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutValidateBeforeCall(spaceId, instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attach Space To Instance (asynchronously)
     * Attach a space to a specific instance.  Parameters: - **space_id**: ID of the space to attach - **instance_id**: UUID of the instance to attach the space to (from URL path)  Returns: - **200**: Space attached to instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutAsync(UUID spaceId, UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachSpaceToInstanceAccessV2SpacesSpaceIdInstancesInstanceIdPutValidateBeforeCall(spaceId, instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkDbAccessDebugDbAccessPost
     * @param dbUrlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDbAccessDebugDbAccessPostCall(DbUrlRequest dbUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dbUrlRequest;

        // create path and map variables
        String localVarPath = "/_debug/db-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDbAccessDebugDbAccessPostValidateBeforeCall(DbUrlRequest dbUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbUrlRequest' is set
        if (dbUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'dbUrlRequest' when calling checkDbAccessDebugDbAccessPost(Async)");
        }

        return checkDbAccessDebugDbAccessPostCall(dbUrlRequest, _callback);

    }

    /**
     * Check Db Access
     * 
     * @param dbUrlRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object checkDbAccessDebugDbAccessPost(DbUrlRequest dbUrlRequest) throws ApiException {
        ApiResponse<Object> localVarResp = checkDbAccessDebugDbAccessPostWithHttpInfo(dbUrlRequest);
        return localVarResp.getData();
    }

    /**
     * Check Db Access
     * 
     * @param dbUrlRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> checkDbAccessDebugDbAccessPostWithHttpInfo(DbUrlRequest dbUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = checkDbAccessDebugDbAccessPostValidateBeforeCall(dbUrlRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Db Access (asynchronously)
     * 
     * @param dbUrlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDbAccessDebugDbAccessPostAsync(DbUrlRequest dbUrlRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDbAccessDebugDbAccessPostValidateBeforeCall(dbUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkDbServerAccessDbServerCheckAccessPost
     * @param name  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDbServerAccessDbServerCheckAccessPostCall(String name, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/db/server/check-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDbServerAccessDbServerCheckAccessPostValidateBeforeCall(String name, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling checkDbServerAccessDbServerCheckAccessPost(Async)");
        }

        return checkDbServerAccessDbServerCheckAccessPostCall(name, authorization, _callback);

    }

    /**
     * Check Db Server Access
     * 
     * @param name  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object checkDbServerAccessDbServerCheckAccessPost(String name, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = checkDbServerAccessDbServerCheckAccessPostWithHttpInfo(name, authorization);
        return localVarResp.getData();
    }

    /**
     * Check Db Server Access
     * 
     * @param name  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> checkDbServerAccessDbServerCheckAccessPostWithHttpInfo(String name, String authorization) throws ApiException {
        okhttp3.Call localVarCall = checkDbServerAccessDbServerCheckAccessPostValidateBeforeCall(name, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Db Server Access (asynchronously)
     * 
     * @param name  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDbServerAccessDbServerCheckAccessPostAsync(String name, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDbServerAccessDbServerCheckAccessPostValidateBeforeCall(name, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInstanceInstancesPut
     * @param name  (required)
     * @param storage  (optional, default to create-s3)
     * @param schemaStr  (optional)
     * @param dbServerKey  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInstanceInstancesPutCall(String name, String storage, String schemaStr, String dbServerKey, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (storage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storage", storage));
        }

        if (schemaStr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_str", schemaStr));
        }

        if (dbServerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db_server_key", dbServerKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstanceInstancesPutValidateBeforeCall(String name, String storage, String schemaStr, String dbServerKey, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createInstanceInstancesPut(Async)");
        }

        return createInstanceInstancesPutCall(name, storage, schemaStr, dbServerKey, authorization, _callback);

    }

    /**
     * Create Instance
     * 
     * @param name  (required)
     * @param storage  (optional, default to create-s3)
     * @param schemaStr  (optional)
     * @param dbServerKey  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createInstanceInstancesPut(String name, String storage, String schemaStr, String dbServerKey, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = createInstanceInstancesPutWithHttpInfo(name, storage, schemaStr, dbServerKey, authorization);
        return localVarResp.getData();
    }

    /**
     * Create Instance
     * 
     * @param name  (required)
     * @param storage  (optional, default to create-s3)
     * @param schemaStr  (optional)
     * @param dbServerKey  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createInstanceInstancesPutWithHttpInfo(String name, String storage, String schemaStr, String dbServerKey, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createInstanceInstancesPutValidateBeforeCall(name, storage, schemaStr, dbServerKey, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Instance (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional, default to create-s3)
     * @param schemaStr  (optional)
     * @param dbServerKey  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInstanceInstancesPutAsync(String name, String storage, String schemaStr, String dbServerKey, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstanceInstancesPutValidateBeforeCall(name, storage, schemaStr, dbServerKey, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRecordInstancesInstanceIdModulesModuleNameModelNamePut
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordInstancesInstanceIdModulesModuleNameModelNamePutCall(String moduleName, String modelName, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordInstancesInstanceIdModulesModuleNameModelNamePutValidateBeforeCall(String moduleName, String modelName, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling createRecordInstancesInstanceIdModulesModuleNameModelNamePut(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling createRecordInstancesInstanceIdModulesModuleNameModelNamePut(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling createRecordInstancesInstanceIdModulesModuleNameModelNamePut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRecordInstancesInstanceIdModulesModuleNameModelNamePut(Async)");
        }

        return createRecordInstancesInstanceIdModulesModuleNameModelNamePutCall(moduleName, modelName, instanceId, body, schemaId, authorization, _callback);

    }

    /**
     * Create Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createRecordInstancesInstanceIdModulesModuleNameModelNamePut(String moduleName, String modelName, UUID instanceId, Object body, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = createRecordInstancesInstanceIdModulesModuleNameModelNamePutWithHttpInfo(moduleName, modelName, instanceId, body, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Create Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createRecordInstancesInstanceIdModulesModuleNameModelNamePutWithHttpInfo(String moduleName, String modelName, UUID instanceId, Object body, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRecordInstancesInstanceIdModulesModuleNameModelNamePutValidateBeforeCall(moduleName, modelName, instanceId, body, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Record (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordInstancesInstanceIdModulesModuleNameModelNamePutAsync(String moduleName, String modelName, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordInstancesInstanceIdModulesModuleNameModelNamePutValidateBeforeCall(moduleName, modelName, instanceId, body, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSpaceAccessV2SpacesPut
     * @param createSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceAccessV2SpacesPutCall(CreateSpaceRequestBody createSpaceRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSpaceRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceAccessV2SpacesPutValidateBeforeCall(CreateSpaceRequestBody createSpaceRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSpaceRequestBody' is set
        if (createSpaceRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createSpaceRequestBody' when calling createSpaceAccessV2SpacesPut(Async)");
        }

        return createSpaceAccessV2SpacesPutCall(createSpaceRequestBody, authorization, _callback);

    }

    /**
     * Create Space
     * Create a new space.  Parameters: - **body**: Request body containing space details   - **name**: Name of the space   - **organization_id**: UUID of the organization   - **description**: Optional description of the space  Returns: - **201**: Space created successfully
     * @param createSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createSpaceAccessV2SpacesPut(CreateSpaceRequestBody createSpaceRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = createSpaceAccessV2SpacesPutWithHttpInfo(createSpaceRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Create Space
     * Create a new space.  Parameters: - **body**: Request body containing space details   - **name**: Name of the space   - **organization_id**: UUID of the organization   - **description**: Optional description of the space  Returns: - **201**: Space created successfully
     * @param createSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createSpaceAccessV2SpacesPutWithHttpInfo(CreateSpaceRequestBody createSpaceRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createSpaceAccessV2SpacesPutValidateBeforeCall(createSpaceRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Space (asynchronously)
     * Create a new space.  Parameters: - **body**: Request body containing space details   - **name**: Name of the space   - **organization_id**: UUID of the organization   - **description**: Optional description of the space  Returns: - **201**: Space created successfully
     * @param createSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceAccessV2SpacesPutAsync(CreateSpaceRequestBody createSpaceRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceAccessV2SpacesPutValidateBeforeCall(createSpaceRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTeamAccessV2TeamsPut
     * @param createTeamRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamAccessV2TeamsPutCall(CreateTeamRequestBody createTeamRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamAccessV2TeamsPutValidateBeforeCall(CreateTeamRequestBody createTeamRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTeamRequestBody' is set
        if (createTeamRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createTeamRequestBody' when calling createTeamAccessV2TeamsPut(Async)");
        }

        return createTeamAccessV2TeamsPutCall(createTeamRequestBody, authorization, _callback);

    }

    /**
     * Create Team
     * Create a new team.  Parameters: - **body**: Request body containing team details   - **name**: Name of the team   - **organization_id**: UUID of the organization   - **description**: Optional description of the team  Returns: - **201**: Team created successfully
     * @param createTeamRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object createTeamAccessV2TeamsPut(CreateTeamRequestBody createTeamRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = createTeamAccessV2TeamsPutWithHttpInfo(createTeamRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Create Team
     * Create a new team.  Parameters: - **body**: Request body containing team details   - **name**: Name of the team   - **organization_id**: UUID of the organization   - **description**: Optional description of the team  Returns: - **201**: Team created successfully
     * @param createTeamRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createTeamAccessV2TeamsPutWithHttpInfo(CreateTeamRequestBody createTeamRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createTeamAccessV2TeamsPutValidateBeforeCall(createTeamRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Team (asynchronously)
     * Create a new team.  Parameters: - **body**: Request body containing team details   - **name**: Name of the team   - **organization_id**: UUID of the organization   - **description**: Optional description of the team  Returns: - **201**: Team created successfully
     * @param createTeamRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamAccessV2TeamsPutAsync(CreateTeamRequestBody createTeamRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamAccessV2TeamsPutValidateBeforeCall(createTeamRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDelete
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteCall(UUID instanceId, UUID accountId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/collaborators/{account_id}"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteValidateBeforeCall(UUID instanceId, UUID accountId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDelete(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDelete(Async)");
        }

        return deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteCall(instanceId, accountId, authorization, _callback);

    }

    /**
     * Delete Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDelete(UUID instanceId, UUID accountId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteWithHttpInfo(instanceId, accountId, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteWithHttpInfo(UUID instanceId, UUID accountId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteValidateBeforeCall(instanceId, accountId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Collaborator (asynchronously)
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteAsync(UUID instanceId, UUID accountId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollaboratorInstancesInstanceIdCollaboratorsAccountIdDeleteValidateBeforeCall(instanceId, accountId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInstanceInstancesInstanceIdDelete
     * @param instanceId  (required)
     * @param instanceName  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInstanceInstancesInstanceIdDeleteCall(UUID instanceId, String instanceName, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instance_name", instanceName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInstanceInstancesInstanceIdDeleteValidateBeforeCall(UUID instanceId, String instanceName, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteInstanceInstancesInstanceIdDelete(Async)");
        }

        // verify the required parameter 'instanceName' is set
        if (instanceName == null) {
            throw new ApiException("Missing the required parameter 'instanceName' when calling deleteInstanceInstancesInstanceIdDelete(Async)");
        }

        return deleteInstanceInstancesInstanceIdDeleteCall(instanceId, instanceName, authorization, _callback);

    }

    /**
     * Delete Instance
     * 
     * @param instanceId  (required)
     * @param instanceName  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteInstanceInstancesInstanceIdDelete(UUID instanceId, String instanceName, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteInstanceInstancesInstanceIdDeleteWithHttpInfo(instanceId, instanceName, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete Instance
     * 
     * @param instanceId  (required)
     * @param instanceName  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteInstanceInstancesInstanceIdDeleteWithHttpInfo(UUID instanceId, String instanceName, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteInstanceInstancesInstanceIdDeleteValidateBeforeCall(instanceId, instanceName, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Instance (asynchronously)
     * 
     * @param instanceId  (required)
     * @param instanceName  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInstanceInstancesInstanceIdDeleteAsync(UUID instanceId, String instanceName, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInstanceInstancesInstanceIdDeleteValidateBeforeCall(instanceId, instanceName, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteCall(String moduleName, String modelName, String uid, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{uid}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteValidateBeforeCall(String moduleName, String modelName, String uid, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(Async)");
        }

        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(Async)");
        }

        return deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteCall(moduleName, modelName, uid, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Delete Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDelete(String moduleName, String modelName, String uid, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteWithHttpInfo(moduleName, modelName, uid, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteWithHttpInfo(String moduleName, String modelName, String uid, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteValidateBeforeCall(moduleName, modelName, uid, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Record (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteAsync(String moduleName, String modelName, String uid, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordInstancesInstanceIdModulesModuleNameModelNameUidDeleteValidateBeforeCall(moduleName, modelName, uid, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSpaceAccessV2SpacesSpaceIdDelete
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceAccessV2SpacesSpaceIdDeleteCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpaceAccessV2SpacesSpaceIdDeleteValidateBeforeCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteSpaceAccessV2SpacesSpaceIdDelete(Async)");
        }

        return deleteSpaceAccessV2SpacesSpaceIdDeleteCall(spaceId, authorization, _callback);

    }

    /**
     * Delete Space
     * Delete a space and detach it from the instance.  Parameters: - **space_id**: ID of the space to delete  Returns: - **200**: Space deleted successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSpaceAccessV2SpacesSpaceIdDelete(UUID spaceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSpaceAccessV2SpacesSpaceIdDeleteWithHttpInfo(spaceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete Space
     * Delete a space and detach it from the instance.  Parameters: - **space_id**: ID of the space to delete  Returns: - **200**: Space deleted successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSpaceAccessV2SpacesSpaceIdDeleteWithHttpInfo(UUID spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteSpaceAccessV2SpacesSpaceIdDeleteValidateBeforeCall(spaceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Space (asynchronously)
     * Delete a space and detach it from the instance.  Parameters: - **space_id**: ID of the space to delete  Returns: - **200**: Space deleted successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceAccessV2SpacesSpaceIdDeleteAsync(UUID spaceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpaceAccessV2SpacesSpaceIdDeleteValidateBeforeCall(spaceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeamAccessV2TeamsTeamIdDelete
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamAccessV2TeamsTeamIdDeleteCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamAccessV2TeamsTeamIdDeleteValidateBeforeCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling deleteTeamAccessV2TeamsTeamIdDelete(Async)");
        }

        return deleteTeamAccessV2TeamsTeamIdDeleteCall(teamId, authorization, _callback);

    }

    /**
     * Delete Team
     * Delete a team.  Parameters: - **team_id**: UUID of the team to delete  Returns: - **200**: Team deleted successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTeamAccessV2TeamsTeamIdDelete(UUID teamId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTeamAccessV2TeamsTeamIdDeleteWithHttpInfo(teamId, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete Team
     * Delete a team.  Parameters: - **team_id**: UUID of the team to delete  Returns: - **200**: Team deleted successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTeamAccessV2TeamsTeamIdDeleteWithHttpInfo(UUID teamId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamAccessV2TeamsTeamIdDeleteValidateBeforeCall(teamId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Team (asynchronously)
     * Delete a team.  Parameters: - **team_id**: UUID of the team to delete  Returns: - **200**: Team deleted successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamAccessV2TeamsTeamIdDeleteAsync(UUID teamId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamAccessV2TeamsTeamIdDeleteValidateBeforeCall(teamId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteCall(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{id}/{label_field}/{label_id}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "label_field" + "}", localVarApiClient.escapeString(labelField.toString()))
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteValidateBeforeCall(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        // verify the required parameter 'labelField' is set
        if (labelField == null) {
            throw new ApiException("Missing the required parameter 'labelField' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(Async)");
        }

        return detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Detach Label
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDelete(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteWithHttpInfo(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Detach Label
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteWithHttpInfo(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteValidateBeforeCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detach Label (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param labelField  (required)
     * @param labelId  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteAsync(String moduleName, String modelName, Integer id, String labelField, Integer labelId, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachLabelInstancesInstanceIdModulesModuleNameModelNameIdLabelFieldLabelIdDeleteValidateBeforeCall(moduleName, modelName, id, labelField, labelId, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDelete
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteCall(UUID spaceId, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/instances/{instance_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteValidateBeforeCall(UUID spaceId, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDelete(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDelete(Async)");
        }

        return detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteCall(spaceId, instanceId, authorization, _callback);

    }

    /**
     * Detach Space From Instance
     * Detach a space from a specific instance.  Parameters: - **space_id**: ID of the space to detach - **instance_id**: UUID of the instance to detach the space from (from URL path)  Returns: - **200**: Space detached from instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDelete(UUID spaceId, UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteWithHttpInfo(spaceId, instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Detach Space From Instance
     * Detach a space from a specific instance.  Parameters: - **space_id**: ID of the space to detach - **instance_id**: UUID of the instance to detach the space from (from URL path)  Returns: - **200**: Space detached from instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteWithHttpInfo(UUID spaceId, UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteValidateBeforeCall(spaceId, instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detach Space From Instance (asynchronously)
     * Detach a space from a specific instance.  Parameters: - **space_id**: ID of the space to detach - **instance_id**: UUID of the instance to detach the space from (from URL path)  Returns: - **200**: Space detached from instance successfully  Requires admin access to the instance
     * @param spaceId  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteAsync(UUID spaceId, UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachSpaceFromInstanceAccessV2SpacesSpaceIdInstancesInstanceIdDeleteValidateBeforeCall(spaceId, instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDbTokenAccessV2InstancesInstanceIdDbTokenGet
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbTokenAccessV2InstancesInstanceIdDbTokenGetCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/instances/{instance_id}/db_token"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDbTokenAccessV2InstancesInstanceIdDbTokenGetValidateBeforeCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getDbTokenAccessV2InstancesInstanceIdDbTokenGet(Async)");
        }

        return getDbTokenAccessV2InstancesInstanceIdDbTokenGetCall(instanceId, authorization, _callback);

    }

    /**
     * Get Db Token
     * Get a database token for the specified instance.  This token can be used to authenticate with the instance&#39;s database.  Parameters: - **instance_id**: UUID of the instance to get the token for (from URL path)  Returns: - **200**: Database token retrieved successfully   - **token**: The database token - **401**: Unauthorized
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getDbTokenAccessV2InstancesInstanceIdDbTokenGet(UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getDbTokenAccessV2InstancesInstanceIdDbTokenGetWithHttpInfo(instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Db Token
     * Get a database token for the specified instance.  This token can be used to authenticate with the instance&#39;s database.  Parameters: - **instance_id**: UUID of the instance to get the token for (from URL path)  Returns: - **200**: Database token retrieved successfully   - **token**: The database token - **401**: Unauthorized
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDbTokenAccessV2InstancesInstanceIdDbTokenGetWithHttpInfo(UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getDbTokenAccessV2InstancesInstanceIdDbTokenGetValidateBeforeCall(instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Db Token (asynchronously)
     * Get a database token for the specified instance.  This token can be used to authenticate with the instance&#39;s database.  Parameters: - **instance_id**: UUID of the instance to get the token for (from URL path)  Returns: - **200**: Database token retrieved successfully   - **token**: The database token - **401**: Unauthorized
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDbTokenAccessV2InstancesInstanceIdDbTokenGetAsync(UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDbTokenAccessV2InstancesInstanceIdDbTokenGetValidateBeforeCall(instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstanceStatisticsInstancesInstanceIdStatisticsGet
     * @param instanceId  (required)
     * @param q In ${module}.${model} format (case-sensitive) (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceStatisticsInstancesInstanceIdStatisticsGetCall(UUID instanceId, List<String> q, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/statistics"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "q", q));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstanceStatisticsInstancesInstanceIdStatisticsGetValidateBeforeCall(UUID instanceId, List<String> q, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getInstanceStatisticsInstancesInstanceIdStatisticsGet(Async)");
        }

        return getInstanceStatisticsInstancesInstanceIdStatisticsGetCall(instanceId, q, schemaId, authorization, _callback);

    }

    /**
     * Get Instance Statistics
     * 
     * @param instanceId  (required)
     * @param q In ${module}.${model} format (case-sensitive) (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getInstanceStatisticsInstancesInstanceIdStatisticsGet(UUID instanceId, List<String> q, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getInstanceStatisticsInstancesInstanceIdStatisticsGetWithHttpInfo(instanceId, q, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Instance Statistics
     * 
     * @param instanceId  (required)
     * @param q In ${module}.${model} format (case-sensitive) (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getInstanceStatisticsInstancesInstanceIdStatisticsGetWithHttpInfo(UUID instanceId, List<String> q, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getInstanceStatisticsInstancesInstanceIdStatisticsGetValidateBeforeCall(instanceId, q, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Instance Statistics (asynchronously)
     * 
     * @param instanceId  (required)
     * @param q In ${module}.${model} format (case-sensitive) (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstanceStatisticsInstancesInstanceIdStatisticsGetAsync(UUID instanceId, List<String> q, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstanceStatisticsInstancesInstanceIdStatisticsGetValidateBeforeCall(instanceId, q, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIpDebugIpGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIpDebugIpGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_debug/ip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIpDebugIpGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getIpDebugIpGetCall(_callback);

    }

    /**
     * Get Ip
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public Object getIpDebugIpGet() throws ApiException {
        ApiResponse<Object> localVarResp = getIpDebugIpGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Ip
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getIpDebugIpGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getIpDebugIpGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ip (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIpDebugIpGetAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIpDebugIpGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGet
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetCall(UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/non_empty_tables"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetValidateBeforeCall(UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGet(Async)");
        }

        return getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetCall(instanceId, schemaId, authorization, _callback);

    }

    /**
     * Get Non Empty Tables
     * 
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGet(UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetWithHttpInfo(instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Non Empty Tables
     * 
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetWithHttpInfo(UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetValidateBeforeCall(instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Non Empty Tables (asynchronously)
     * 
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetAsync(UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNonEmptyTablesInstancesInstanceIdNonEmptyTablesGetValidateBeforeCall(instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param idOrUid  (required)
     * @param instanceId  (required)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostCall(String moduleName, String modelName, String idOrUid, UUID instanceId, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordRequestBody getRecordRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRecordRequestBody;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{id_or_uid}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "id_or_uid" + "}", localVarApiClient.escapeString(idOrUid.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitToMany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_to_many", limitToMany));
        }

        if (includeForeignKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_foreign_keys", includeForeignKeys));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostValidateBeforeCall(String moduleName, String modelName, String idOrUid, UUID instanceId, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordRequestBody getRecordRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(Async)");
        }

        // verify the required parameter 'idOrUid' is set
        if (idOrUid == null) {
            throw new ApiException("Missing the required parameter 'idOrUid' when calling getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(Async)");
        }

        return getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostCall(moduleName, modelName, idOrUid, instanceId, limitToMany, includeForeignKeys, schemaId, authorization, getRecordRequestBody, _callback);

    }

    /**
     * Get Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param idOrUid  (required)
     * @param instanceId  (required)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordRequestBody  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPost(String moduleName, String modelName, String idOrUid, UUID instanceId, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordRequestBody getRecordRequestBody) throws ApiException {
        ApiResponse<Object> localVarResp = getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostWithHttpInfo(moduleName, modelName, idOrUid, instanceId, limitToMany, includeForeignKeys, schemaId, authorization, getRecordRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param idOrUid  (required)
     * @param instanceId  (required)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordRequestBody  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostWithHttpInfo(String moduleName, String modelName, String idOrUid, UUID instanceId, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordRequestBody getRecordRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostValidateBeforeCall(moduleName, modelName, idOrUid, instanceId, limitToMany, includeForeignKeys, schemaId, authorization, getRecordRequestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Record (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param idOrUid  (required)
     * @param instanceId  (required)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostAsync(String moduleName, String modelName, String idOrUid, UUID instanceId, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordRequestBody getRecordRequestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordInstancesInstanceIdModulesModuleNameModelNameIdOrUidPostValidateBeforeCall(moduleName, modelName, idOrUid, instanceId, limitToMany, includeForeignKeys, schemaId, authorization, getRecordRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecordsInstancesInstanceIdModulesModuleNameModelNamePost
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordsRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordsInstancesInstanceIdModulesModuleNameModelNamePostCall(String moduleName, String modelName, UUID instanceId, Integer limit, Integer offset, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordsRequestBody getRecordsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRecordsRequestBody;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limitToMany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_to_many", limitToMany));
        }

        if (includeForeignKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_foreign_keys", includeForeignKeys));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordsInstancesInstanceIdModulesModuleNameModelNamePostValidateBeforeCall(String moduleName, String modelName, UUID instanceId, Integer limit, Integer offset, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordsRequestBody getRecordsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling getRecordsInstancesInstanceIdModulesModuleNameModelNamePost(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling getRecordsInstancesInstanceIdModulesModuleNameModelNamePost(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getRecordsInstancesInstanceIdModulesModuleNameModelNamePost(Async)");
        }

        return getRecordsInstancesInstanceIdModulesModuleNameModelNamePostCall(moduleName, modelName, instanceId, limit, offset, limitToMany, includeForeignKeys, schemaId, authorization, getRecordsRequestBody, _callback);

    }

    /**
     * Get Records
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordsRequestBody  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getRecordsInstancesInstanceIdModulesModuleNameModelNamePost(String moduleName, String modelName, UUID instanceId, Integer limit, Integer offset, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordsRequestBody getRecordsRequestBody) throws ApiException {
        ApiResponse<Object> localVarResp = getRecordsInstancesInstanceIdModulesModuleNameModelNamePostWithHttpInfo(moduleName, modelName, instanceId, limit, offset, limitToMany, includeForeignKeys, schemaId, authorization, getRecordsRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get Records
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordsRequestBody  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getRecordsInstancesInstanceIdModulesModuleNameModelNamePostWithHttpInfo(String moduleName, String modelName, UUID instanceId, Integer limit, Integer offset, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordsRequestBody getRecordsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getRecordsInstancesInstanceIdModulesModuleNameModelNamePostValidateBeforeCall(moduleName, modelName, instanceId, limit, offset, limitToMany, includeForeignKeys, schemaId, authorization, getRecordsRequestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Records (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param limitToMany  (optional, default to 10)
     * @param includeForeignKeys  (optional, default to false)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getRecordsRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordsInstancesInstanceIdModulesModuleNameModelNamePostAsync(String moduleName, String modelName, UUID instanceId, Integer limit, Integer offset, Integer limitToMany, Boolean includeForeignKeys, UUID schemaId, String authorization, GetRecordsRequestBody getRecordsRequestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordsInstancesInstanceIdModulesModuleNameModelNamePostValidateBeforeCall(moduleName, modelName, instanceId, limit, offset, limitToMany, includeForeignKeys, schemaId, authorization, getRecordsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetCall(String moduleName, String modelName, Integer id, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{id}/counts"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetValidateBeforeCall(String moduleName, String modelName, Integer id, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(Async)");
        }

        return getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetCall(moduleName, modelName, id, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Get Relation Counts
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGet(String moduleName, String modelName, Integer id, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetWithHttpInfo(moduleName, modelName, id, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Relation Counts
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetWithHttpInfo(String moduleName, String modelName, Integer id, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetValidateBeforeCall(moduleName, modelName, id, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Relation Counts (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param id  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetAsync(String moduleName, String modelName, Integer id, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationCountsInstancesInstanceIdModulesModuleNameModelNameIdCountsGetValidateBeforeCall(moduleName, modelName, id, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetCall(String moduleName, String modelName, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/schema/{module_name}/{model_name}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetValidateBeforeCall(String moduleName, String modelName, UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet(Async)");
        }

        return getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetCall(moduleName, modelName, instanceId, authorization, _callback);

    }

    /**
     * Get Relations
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getRelationsInstancesInstanceIdSchemaModuleNameModelNameGet(String moduleName, String modelName, UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetWithHttpInfo(moduleName, modelName, instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Relations
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetWithHttpInfo(String moduleName, String modelName, UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetValidateBeforeCall(moduleName, modelName, instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Relations (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetAsync(String moduleName, String modelName, UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelationsInstancesInstanceIdSchemaModuleNameModelNameGetValidateBeforeCall(moduleName, modelName, instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchemaInstancesInstanceIdSchemaGet
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaInstancesInstanceIdSchemaGetCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/schema"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaInstancesInstanceIdSchemaGetValidateBeforeCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getSchemaInstancesInstanceIdSchemaGet(Async)");
        }

        return getSchemaInstancesInstanceIdSchemaGetCall(instanceId, authorization, _callback);

    }

    /**
     * Get Schema
     * 
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getSchemaInstancesInstanceIdSchemaGet(UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getSchemaInstancesInstanceIdSchemaGetWithHttpInfo(instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Schema
     * 
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSchemaInstancesInstanceIdSchemaGetWithHttpInfo(UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getSchemaInstancesInstanceIdSchemaGetValidateBeforeCall(instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Schema (asynchronously)
     * 
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaInstancesInstanceIdSchemaGetAsync(UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaInstancesInstanceIdSchemaGetValidateBeforeCall(instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpaceAccessV2SpacesSpaceIdGet
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceAccessV2SpacesSpaceIdGetCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceAccessV2SpacesSpaceIdGetValidateBeforeCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getSpaceAccessV2SpacesSpaceIdGet(Async)");
        }

        return getSpaceAccessV2SpacesSpaceIdGetCall(spaceId, authorization, _callback);

    }

    /**
     * Get Space
     * Get details of a specific space.  Parameters: - **space_id**: ID of the space to retrieve  Returns: - **200**: Space details retrieved successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getSpaceAccessV2SpacesSpaceIdGet(UUID spaceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getSpaceAccessV2SpacesSpaceIdGetWithHttpInfo(spaceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Space
     * Get details of a specific space.  Parameters: - **space_id**: ID of the space to retrieve  Returns: - **200**: Space details retrieved successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSpaceAccessV2SpacesSpaceIdGetWithHttpInfo(UUID spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getSpaceAccessV2SpacesSpaceIdGetValidateBeforeCall(spaceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Space (asynchronously)
     * Get details of a specific space.  Parameters: - **space_id**: ID of the space to retrieve  Returns: - **200**: Space details retrieved successfully - **404**: Space not found
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceAccessV2SpacesSpaceIdGetAsync(UUID spaceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceAccessV2SpacesSpaceIdGetValidateBeforeCall(spaceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamAccessV2TeamsTeamIdGet
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamAccessV2TeamsTeamIdGetCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamAccessV2TeamsTeamIdGetValidateBeforeCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getTeamAccessV2TeamsTeamIdGet(Async)");
        }

        return getTeamAccessV2TeamsTeamIdGetCall(teamId, authorization, _callback);

    }

    /**
     * Get Team
     * Get details of a specific team.  Parameters: - **team_id**: UUID of the team to retrieve  Returns: - **200**: Team details retrieved successfully - **404**: Team not found
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getTeamAccessV2TeamsTeamIdGet(UUID teamId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getTeamAccessV2TeamsTeamIdGetWithHttpInfo(teamId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Team
     * Get details of a specific team.  Parameters: - **team_id**: UUID of the team to retrieve  Returns: - **200**: Team details retrieved successfully - **404**: Team not found
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getTeamAccessV2TeamsTeamIdGetWithHttpInfo(UUID teamId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getTeamAccessV2TeamsTeamIdGetValidateBeforeCall(teamId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Team (asynchronously)
     * Get details of a specific team.  Parameters: - **team_id**: UUID of the team to retrieve  Returns: - **200**: Team details retrieved successfully - **404**: Team not found
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamAccessV2TeamsTeamIdGetAsync(UUID teamId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamAccessV2TeamsTeamIdGetValidateBeforeCall(teamId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreeInstancesInstanceIdTreeGet
     * @param instanceId  (required)
     * @param entityType  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeInstancesInstanceIdTreeGetCall(UUID instanceId, String entityType, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/tree"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_type", entityType));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreeInstancesInstanceIdTreeGetValidateBeforeCall(UUID instanceId, String entityType, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getTreeInstancesInstanceIdTreeGet(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getTreeInstancesInstanceIdTreeGet(Async)");
        }

        return getTreeInstancesInstanceIdTreeGetCall(instanceId, entityType, schemaId, authorization, _callback);

    }

    /**
     * Get Tree
     * 
     * @param instanceId  (required)
     * @param entityType  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getTreeInstancesInstanceIdTreeGet(UUID instanceId, String entityType, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = getTreeInstancesInstanceIdTreeGetWithHttpInfo(instanceId, entityType, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Tree
     * 
     * @param instanceId  (required)
     * @param entityType  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getTreeInstancesInstanceIdTreeGetWithHttpInfo(UUID instanceId, String entityType, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getTreeInstancesInstanceIdTreeGetValidateBeforeCall(instanceId, entityType, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tree (asynchronously)
     * 
     * @param instanceId  (required)
     * @param entityType  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeInstancesInstanceIdTreeGetAsync(UUID instanceId, String entityType, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreeInstancesInstanceIdTreeGetValidateBeforeCall(instanceId, entityType, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param fieldPath  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getValuesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostCall(String moduleName, String modelName, String fieldPath, UUID instanceId, Integer limit, Integer offset, UUID schemaId, String authorization, GetValuesRequestBody getValuesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getValuesRequestBody;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/fields/{field_path}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "field_path" + "}", localVarApiClient.escapeString(fieldPath.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostValidateBeforeCall(String moduleName, String modelName, String fieldPath, UUID instanceId, Integer limit, Integer offset, UUID schemaId, String authorization, GetValuesRequestBody getValuesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(Async)");
        }

        // verify the required parameter 'fieldPath' is set
        if (fieldPath == null) {
            throw new ApiException("Missing the required parameter 'fieldPath' when calling getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(Async)");
        }

        return getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostCall(moduleName, modelName, fieldPath, instanceId, limit, offset, schemaId, authorization, getValuesRequestBody, _callback);

    }

    /**
     * Get Values
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param fieldPath  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getValuesRequestBody  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPost(String moduleName, String modelName, String fieldPath, UUID instanceId, Integer limit, Integer offset, UUID schemaId, String authorization, GetValuesRequestBody getValuesRequestBody) throws ApiException {
        ApiResponse<Object> localVarResp = getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostWithHttpInfo(moduleName, modelName, fieldPath, instanceId, limit, offset, schemaId, authorization, getValuesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Get Values
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param fieldPath  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getValuesRequestBody  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostWithHttpInfo(String moduleName, String modelName, String fieldPath, UUID instanceId, Integer limit, Integer offset, UUID schemaId, String authorization, GetValuesRequestBody getValuesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostValidateBeforeCall(moduleName, modelName, fieldPath, instanceId, limit, offset, schemaId, authorization, getValuesRequestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Values (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param fieldPath  (required)
     * @param instanceId  (required)
     * @param limit  (optional, default to 50)
     * @param offset  (optional, default to 0)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param getValuesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostAsync(String moduleName, String modelName, String fieldPath, UUID instanceId, Integer limit, Integer offset, UUID schemaId, String authorization, GetValuesRequestBody getValuesRequestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuesInstancesInstanceIdModulesModuleNameModelNameFieldsFieldPathPostValidateBeforeCall(moduleName, modelName, fieldPath, instanceId, limit, offset, schemaId, authorization, getValuesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantS3PermissionsStoragesS3BucketNamePermissionsPut
     * @param bucketName  (required)
     * @param s3PermissionsRequest  (required)
     * @param awsAccountId  (optional, default to 767398070972)
     * @param awsUserName  (optional, default to lamin-manager)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantS3PermissionsStoragesS3BucketNamePermissionsPutCall(String bucketName, S3PermissionsRequest s3PermissionsRequest, String awsAccountId, String awsUserName, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = s3PermissionsRequest;

        // create path and map variables
        String localVarPath = "/storages/s3/{bucket_name}/permissions"
            .replace("{" + "bucket_name" + "}", localVarApiClient.escapeString(bucketName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awsAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aws_account_id", awsAccountId));
        }

        if (awsUserName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aws_user_name", awsUserName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantS3PermissionsStoragesS3BucketNamePermissionsPutValidateBeforeCall(String bucketName, S3PermissionsRequest s3PermissionsRequest, String awsAccountId, String awsUserName, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling grantS3PermissionsStoragesS3BucketNamePermissionsPut(Async)");
        }

        // verify the required parameter 's3PermissionsRequest' is set
        if (s3PermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 's3PermissionsRequest' when calling grantS3PermissionsStoragesS3BucketNamePermissionsPut(Async)");
        }

        return grantS3PermissionsStoragesS3BucketNamePermissionsPutCall(bucketName, s3PermissionsRequest, awsAccountId, awsUserName, authorization, _callback);

    }

    /**
     * Grant S3 Permissions
     * 
     * @param bucketName  (required)
     * @param s3PermissionsRequest  (required)
     * @param awsAccountId  (optional, default to 767398070972)
     * @param awsUserName  (optional, default to lamin-manager)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object grantS3PermissionsStoragesS3BucketNamePermissionsPut(String bucketName, S3PermissionsRequest s3PermissionsRequest, String awsAccountId, String awsUserName, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = grantS3PermissionsStoragesS3BucketNamePermissionsPutWithHttpInfo(bucketName, s3PermissionsRequest, awsAccountId, awsUserName, authorization);
        return localVarResp.getData();
    }

    /**
     * Grant S3 Permissions
     * 
     * @param bucketName  (required)
     * @param s3PermissionsRequest  (required)
     * @param awsAccountId  (optional, default to 767398070972)
     * @param awsUserName  (optional, default to lamin-manager)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> grantS3PermissionsStoragesS3BucketNamePermissionsPutWithHttpInfo(String bucketName, S3PermissionsRequest s3PermissionsRequest, String awsAccountId, String awsUserName, String authorization) throws ApiException {
        okhttp3.Call localVarCall = grantS3PermissionsStoragesS3BucketNamePermissionsPutValidateBeforeCall(bucketName, s3PermissionsRequest, awsAccountId, awsUserName, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grant S3 Permissions (asynchronously)
     * 
     * @param bucketName  (required)
     * @param s3PermissionsRequest  (required)
     * @param awsAccountId  (optional, default to 767398070972)
     * @param awsUserName  (optional, default to lamin-manager)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantS3PermissionsStoragesS3BucketNamePermissionsPutAsync(String bucketName, S3PermissionsRequest s3PermissionsRequest, String awsAccountId, String awsUserName, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantS3PermissionsStoragesS3BucketNamePermissionsPutValidateBeforeCall(bucketName, s3PermissionsRequest, awsAccountId, awsUserName, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param groupByRequestBody  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostCall(String moduleName, String modelName, UUID instanceId, GroupByRequestBody groupByRequestBody, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupByRequestBody;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/group-by"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostValidateBeforeCall(String moduleName, String modelName, UUID instanceId, GroupByRequestBody groupByRequestBody, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(Async)");
        }

        // verify the required parameter 'groupByRequestBody' is set
        if (groupByRequestBody == null) {
            throw new ApiException("Missing the required parameter 'groupByRequestBody' when calling groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(Async)");
        }

        return groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostCall(moduleName, modelName, instanceId, groupByRequestBody, schemaId, authorization, _callback);

    }

    /**
     * Group By
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param groupByRequestBody  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPost(String moduleName, String modelName, UUID instanceId, GroupByRequestBody groupByRequestBody, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostWithHttpInfo(moduleName, modelName, instanceId, groupByRequestBody, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Group By
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param groupByRequestBody  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostWithHttpInfo(String moduleName, String modelName, UUID instanceId, GroupByRequestBody groupByRequestBody, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostValidateBeforeCall(moduleName, modelName, instanceId, groupByRequestBody, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Group By (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param instanceId  (required)
     * @param groupByRequestBody  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostAsync(String moduleName, String modelName, UUID instanceId, GroupByRequestBody groupByRequestBody, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupByInstancesInstanceIdModulesModuleNameModelNameGroupByPostValidateBeforeCall(moduleName, modelName, instanceId, groupByRequestBody, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGet
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/instances/{instance_id}/collaborators"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetValidateBeforeCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGet(Async)");
        }

        return listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetCall(instanceId, authorization, _callback);

    }

    /**
     * List Collaborators
     * List all collaborators of an instance.  Parameters: - **instance_id**: UUID of the instance to list collaborators for (from URL path)  Returns: - **200**: List of instance collaborators retrieved successfully  Requires read access to the instance
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGet(UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetWithHttpInfo(instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Collaborators
     * List all collaborators of an instance.  Parameters: - **instance_id**: UUID of the instance to list collaborators for (from URL path)  Returns: - **200**: List of instance collaborators retrieved successfully  Requires read access to the instance
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetWithHttpInfo(UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetValidateBeforeCall(instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Collaborators (asynchronously)
     * List all collaborators of an instance.  Parameters: - **instance_id**: UUID of the instance to list collaborators for (from URL path)  Returns: - **200**: List of instance collaborators retrieved successfully  Requires read access to the instance
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetAsync(UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollaboratorsAccessV2InstancesInstanceIdCollaboratorsGetValidateBeforeCall(instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDirectoryInstancesInstanceIdEntityTypeGet
     * @param entityType  (required)
     * @param instanceId  (required)
     * @param path  (optional, default to )
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectoryInstancesInstanceIdEntityTypeGetCall(String entityType, UUID instanceId, String path, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/{entity_type}"
            .replace("{" + "entity_type" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectoryInstancesInstanceIdEntityTypeGetValidateBeforeCall(String entityType, UUID instanceId, String path, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling listDirectoryInstancesInstanceIdEntityTypeGet(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling listDirectoryInstancesInstanceIdEntityTypeGet(Async)");
        }

        return listDirectoryInstancesInstanceIdEntityTypeGetCall(entityType, instanceId, path, schemaId, authorization, _callback);

    }

    /**
     * List Directory
     * 
     * @param entityType  (required)
     * @param instanceId  (required)
     * @param path  (optional, default to )
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listDirectoryInstancesInstanceIdEntityTypeGet(String entityType, UUID instanceId, String path, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listDirectoryInstancesInstanceIdEntityTypeGetWithHttpInfo(entityType, instanceId, path, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Directory
     * 
     * @param entityType  (required)
     * @param instanceId  (required)
     * @param path  (optional, default to )
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listDirectoryInstancesInstanceIdEntityTypeGetWithHttpInfo(String entityType, UUID instanceId, String path, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listDirectoryInstancesInstanceIdEntityTypeGetValidateBeforeCall(entityType, instanceId, path, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Directory (asynchronously)
     * 
     * @param entityType  (required)
     * @param instanceId  (required)
     * @param path  (optional, default to )
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectoryInstancesInstanceIdEntityTypeGetAsync(String entityType, UUID instanceId, String path, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectoryInstancesInstanceIdEntityTypeGetValidateBeforeCall(entityType, instanceId, path, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInstanceSpacesAccessV2SpacesInstancesInstanceIdGet
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/instances/{instance_id}"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetValidateBeforeCall(UUID instanceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling listInstanceSpacesAccessV2SpacesInstancesInstanceIdGet(Async)");
        }

        return listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetCall(instanceId, authorization, _callback);

    }

    /**
     * List Instance Spaces
     * List all spaces attached to an instance.  Parameters: - **instance_id**: UUID of the instance to list spaces for (from URL path)  Returns: - **200**: List of spaces attached to the instance retrieved successfully
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listInstanceSpacesAccessV2SpacesInstancesInstanceIdGet(UUID instanceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetWithHttpInfo(instanceId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Instance Spaces
     * List all spaces attached to an instance.  Parameters: - **instance_id**: UUID of the instance to list spaces for (from URL path)  Returns: - **200**: List of spaces attached to the instance retrieved successfully
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetWithHttpInfo(UUID instanceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetValidateBeforeCall(instanceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Instance Spaces (asynchronously)
     * List all spaces attached to an instance.  Parameters: - **instance_id**: UUID of the instance to list spaces for (from URL path)  Returns: - **200**: List of spaces attached to the instance retrieved successfully
     * @param instanceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetAsync(UUID instanceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstanceSpacesAccessV2SpacesInstancesInstanceIdGetValidateBeforeCall(instanceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGet
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/instances"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetValidateBeforeCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGet(Async)");
        }

        return listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetCall(spaceId, authorization, _callback);

    }

    /**
     * List Instances Using Space
     * List all instances that have this space attached.  Parameters: - **space_id**: ID of the space to check  Returns: - **200**: List of instances using the space retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGet(UUID spaceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetWithHttpInfo(spaceId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Instances Using Space
     * List all instances that have this space attached.  Parameters: - **space_id**: ID of the space to check  Returns: - **200**: List of instances using the space retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetWithHttpInfo(UUID spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetValidateBeforeCall(spaceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Instances Using Space (asynchronously)
     * List all instances that have this space attached.  Parameters: - **space_id**: ID of the space to check  Returns: - **200**: List of instances using the space retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetAsync(UUID spaceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstancesUsingSpaceAccessV2SpacesSpaceIdInstancesGetValidateBeforeCall(spaceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGet
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetCall(UUID organizationId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/organizations/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetValidateBeforeCall(UUID organizationId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGet(Async)");
        }

        return listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetCall(organizationId, authorization, _callback);

    }

    /**
     * List Organization Spaces
     * List all spaces in an organization.  Parameters: - **organization_id**: UUID of the organization to list spaces for  Returns: - **200**: List of spaces retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGet(UUID organizationId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetWithHttpInfo(organizationId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Organization Spaces
     * List all spaces in an organization.  Parameters: - **organization_id**: UUID of the organization to list spaces for  Returns: - **200**: List of spaces retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetWithHttpInfo(UUID organizationId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetValidateBeforeCall(organizationId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Organization Spaces (asynchronously)
     * List all spaces in an organization.  Parameters: - **organization_id**: UUID of the organization to list spaces for  Returns: - **200**: List of spaces retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetAsync(UUID organizationId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationSpacesAccessV2SpacesOrganizationsOrganizationIdGetValidateBeforeCall(organizationId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGet
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetCall(UUID organizationId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/teams/organizations/{organization_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetValidateBeforeCall(UUID organizationId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGet(Async)");
        }

        return listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetCall(organizationId, authorization, _callback);

    }

    /**
     * List Organization Teams
     * List all teams in an organization.  Parameters: - **organization_id**: UUID of the organization to list teams for  Returns: - **200**: List of teams retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGet(UUID organizationId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetWithHttpInfo(organizationId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Organization Teams
     * List all teams in an organization.  Parameters: - **organization_id**: UUID of the organization to list teams for  Returns: - **200**: List of teams retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetWithHttpInfo(UUID organizationId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetValidateBeforeCall(organizationId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Organization Teams (asynchronously)
     * List all teams in an organization.  Parameters: - **organization_id**: UUID of the organization to list teams for  Returns: - **200**: List of teams retrieved successfully
     * @param organizationId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetAsync(UUID organizationId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationTeamsAccessV2TeamsOrganizationsOrganizationIdGetValidateBeforeCall(organizationId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGet
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/collaborators"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetValidateBeforeCall(UUID spaceId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGet(Async)");
        }

        return listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetCall(spaceId, authorization, _callback);

    }

    /**
     * List Space Collaborators
     * List all collaborators of a space.  Parameters: - **space_id**: ID of the space to list collaborators for  Returns: - **200**: List of space collaborators retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGet(UUID spaceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetWithHttpInfo(spaceId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Space Collaborators
     * List all collaborators of a space.  Parameters: - **space_id**: ID of the space to list collaborators for  Returns: - **200**: List of space collaborators retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetWithHttpInfo(UUID spaceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetValidateBeforeCall(spaceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Space Collaborators (asynchronously)
     * List all collaborators of a space.  Parameters: - **space_id**: ID of the space to list collaborators for  Returns: - **200**: List of space collaborators retrieved successfully
     * @param spaceId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetAsync(UUID spaceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSpaceCollaboratorsAccessV2SpacesSpaceIdCollaboratorsGetValidateBeforeCall(spaceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeamMembersAccessV2TeamsTeamIdMembersGet
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMembersAccessV2TeamsTeamIdMembersGetCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}/members"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamMembersAccessV2TeamsTeamIdMembersGetValidateBeforeCall(UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamMembersAccessV2TeamsTeamIdMembersGet(Async)");
        }

        return listTeamMembersAccessV2TeamsTeamIdMembersGetCall(teamId, authorization, _callback);

    }

    /**
     * List Team Members
     * List all members of a team.  Parameters: - **team_id**: UUID of the team to list members for  Returns: - **200**: List of team members retrieved successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object listTeamMembersAccessV2TeamsTeamIdMembersGet(UUID teamId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = listTeamMembersAccessV2TeamsTeamIdMembersGetWithHttpInfo(teamId, authorization);
        return localVarResp.getData();
    }

    /**
     * List Team Members
     * List all members of a team.  Parameters: - **team_id**: UUID of the team to list members for  Returns: - **200**: List of team members retrieved successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listTeamMembersAccessV2TeamsTeamIdMembersGetWithHttpInfo(UUID teamId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listTeamMembersAccessV2TeamsTeamIdMembersGetValidateBeforeCall(teamId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Team Members (asynchronously)
     * List all members of a team.  Parameters: - **team_id**: UUID of the team to list members for  Returns: - **200**: List of team members retrieved successfully
     * @param teamId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamMembersAccessV2TeamsTeamIdMembersGetAsync(UUID teamId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamMembersAccessV2TeamsTeamIdMembersGetValidateBeforeCall(teamId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPut
     * @param instanceDbSpaceId  (required)
     * @param attachSpaceToRecordRequestBody  (required)
     * @param instanceId  (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutCall(Integer instanceDbSpaceId, AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachSpaceToRecordRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/record-attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceDbSpaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instance_db_space_id", instanceDbSpaceId));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instance_id", instanceId));
        }

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutValidateBeforeCall(Integer instanceDbSpaceId, AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceDbSpaceId' is set
        if (instanceDbSpaceId == null) {
            throw new ApiException("Missing the required parameter 'instanceDbSpaceId' when calling moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPut(Async)");
        }

        // verify the required parameter 'attachSpaceToRecordRequestBody' is set
        if (attachSpaceToRecordRequestBody == null) {
            throw new ApiException("Missing the required parameter 'attachSpaceToRecordRequestBody' when calling moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPut(Async)");
        }

        return moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutCall(instanceDbSpaceId, attachSpaceToRecordRequestBody, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Move Record To Space
     * Move a record to a specific space.  Parameters: - **space_id**: ID of the space to move the record to - **body**: Request body containing record details   - **module_name**: Module name of the record   - **model_name**: Model name of the record   - **record_id**: ID of the record to move in the space - **instance_id**: UUID of the instance (from URL path) - **schema_id**: UUID of the schema (from URL path)  Returns: - **200**: Record moved to the space successfully  Requires admin access to the instance
     * @param instanceDbSpaceId  (required)
     * @param attachSpaceToRecordRequestBody  (required)
     * @param instanceId  (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPut(Integer instanceDbSpaceId, AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutWithHttpInfo(instanceDbSpaceId, attachSpaceToRecordRequestBody, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Move Record To Space
     * Move a record to a specific space.  Parameters: - **space_id**: ID of the space to move the record to - **body**: Request body containing record details   - **module_name**: Module name of the record   - **model_name**: Model name of the record   - **record_id**: ID of the record to move in the space - **instance_id**: UUID of the instance (from URL path) - **schema_id**: UUID of the schema (from URL path)  Returns: - **200**: Record moved to the space successfully  Requires admin access to the instance
     * @param instanceDbSpaceId  (required)
     * @param attachSpaceToRecordRequestBody  (required)
     * @param instanceId  (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutWithHttpInfo(Integer instanceDbSpaceId, AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutValidateBeforeCall(instanceDbSpaceId, attachSpaceToRecordRequestBody, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move Record To Space (asynchronously)
     * Move a record to a specific space.  Parameters: - **space_id**: ID of the space to move the record to - **body**: Request body containing record details   - **module_name**: Module name of the record   - **model_name**: Model name of the record   - **record_id**: ID of the record to move in the space - **instance_id**: UUID of the instance (from URL path) - **schema_id**: UUID of the schema (from URL path)  Returns: - **200**: Record moved to the space successfully  Requires admin access to the instance
     * @param instanceDbSpaceId  (required)
     * @param attachSpaceToRecordRequestBody  (required)
     * @param instanceId  (optional)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutAsync(Integer instanceDbSpaceId, AttachSpaceToRecordRequestBody attachSpaceToRecordRequestBody, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveRecordToSpaceAccessV2SpacesSpaceIdRecordAttachmentsPutValidateBeforeCall(instanceDbSpaceId, attachSpaceToRecordRequestBody, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proxyS3S3PathGet
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGetCall(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s3/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyS3S3PathGetValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling proxyS3S3PathGet(Async)");
        }

        return proxyS3S3PathGetCall(path, _callback);

    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object proxyS3S3PathGet(String path) throws ApiException {
        ApiResponse<Object> localVarResp = proxyS3S3PathGetWithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> proxyS3S3PathGetWithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = proxyS3S3PathGetValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy S3 (asynchronously)
     * 
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGetAsync(String path, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyS3S3PathGetValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proxyS3S3PathGet_0
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_0Call(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s3/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyS3S3PathGet_0ValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling proxyS3S3PathGet_0(Async)");
        }

        return proxyS3S3PathGet_0Call(path, _callback);

    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object proxyS3S3PathGet_0(String path) throws ApiException {
        ApiResponse<Object> localVarResp = proxyS3S3PathGet_0WithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> proxyS3S3PathGet_0WithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = proxyS3S3PathGet_0ValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy S3 (asynchronously)
     * 
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_0Async(String path, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyS3S3PathGet_0ValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proxyS3S3PathGet_1
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_1Call(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s3/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyS3S3PathGet_1ValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling proxyS3S3PathGet_1(Async)");
        }

        return proxyS3S3PathGet_1Call(path, _callback);

    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object proxyS3S3PathGet_1(String path) throws ApiException {
        ApiResponse<Object> localVarResp = proxyS3S3PathGet_1WithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> proxyS3S3PathGet_1WithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = proxyS3S3PathGet_1ValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy S3 (asynchronously)
     * 
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_1Async(String path, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyS3S3PathGet_1ValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proxyS3S3PathGet_2
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_2Call(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s3/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyS3S3PathGet_2ValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling proxyS3S3PathGet_2(Async)");
        }

        return proxyS3S3PathGet_2Call(path, _callback);

    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object proxyS3S3PathGet_2(String path) throws ApiException {
        ApiResponse<Object> localVarResp = proxyS3S3PathGet_2WithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> proxyS3S3PathGet_2WithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = proxyS3S3PathGet_2ValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy S3 (asynchronously)
     * 
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_2Async(String path, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyS3S3PathGet_2ValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for proxyS3S3PathGet_3
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_3Call(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s3/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call proxyS3S3PathGet_3ValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling proxyS3S3PathGet_3(Async)");
        }

        return proxyS3S3PathGet_3Call(path, _callback);

    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object proxyS3S3PathGet_3(String path) throws ApiException {
        ApiResponse<Object> localVarResp = proxyS3S3PathGet_3WithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * Proxy S3
     * 
     * @param path  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> proxyS3S3PathGet_3WithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = proxyS3S3PathGet_3ValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proxy S3 (asynchronously)
     * 
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call proxyS3S3PathGet_3Async(String path, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = proxyS3S3PathGet_3ValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerDbServerDbServerRegisterPost
     * @param registerDbServerBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDbServerDbServerRegisterPostCall(RegisterDbServerBody registerDbServerBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerDbServerBody;

        // create path and map variables
        String localVarPath = "/db/server/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDbServerDbServerRegisterPostValidateBeforeCall(RegisterDbServerBody registerDbServerBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registerDbServerBody' is set
        if (registerDbServerBody == null) {
            throw new ApiException("Missing the required parameter 'registerDbServerBody' when calling registerDbServerDbServerRegisterPost(Async)");
        }

        return registerDbServerDbServerRegisterPostCall(registerDbServerBody, authorization, _callback);

    }

    /**
     * Register Db Server
     * 
     * @param registerDbServerBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object registerDbServerDbServerRegisterPost(RegisterDbServerBody registerDbServerBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = registerDbServerDbServerRegisterPostWithHttpInfo(registerDbServerBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Register Db Server
     * 
     * @param registerDbServerBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> registerDbServerDbServerRegisterPostWithHttpInfo(RegisterDbServerBody registerDbServerBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = registerDbServerDbServerRegisterPostValidateBeforeCall(registerDbServerBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register Db Server (asynchronously)
     * 
     * @param registerDbServerBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDbServerDbServerRegisterPostAsync(RegisterDbServerBody registerDbServerBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDbServerDbServerRegisterPostValidateBeforeCall(registerDbServerBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerFormInstancesInstanceIdFormsPost
     * @param instanceId  (required)
     * @param registerFormRequest  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerFormInstancesInstanceIdFormsPostCall(UUID instanceId, RegisterFormRequest registerFormRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerFormRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/forms"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerFormInstancesInstanceIdFormsPostValidateBeforeCall(UUID instanceId, RegisterFormRequest registerFormRequest, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling registerFormInstancesInstanceIdFormsPost(Async)");
        }

        // verify the required parameter 'registerFormRequest' is set
        if (registerFormRequest == null) {
            throw new ApiException("Missing the required parameter 'registerFormRequest' when calling registerFormInstancesInstanceIdFormsPost(Async)");
        }

        return registerFormInstancesInstanceIdFormsPostCall(instanceId, registerFormRequest, authorization, _callback);

    }

    /**
     * Register Form
     * Register a form for a specific instance.  Parameters: - **body**: Request body containing form details   - **key**: Key of the form   - **data**: Form data   - **schema_uid**: UID of the schema  Returns: - **201**: Form registered successfully
     * @param instanceId  (required)
     * @param registerFormRequest  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object registerFormInstancesInstanceIdFormsPost(UUID instanceId, RegisterFormRequest registerFormRequest, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = registerFormInstancesInstanceIdFormsPostWithHttpInfo(instanceId, registerFormRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * Register Form
     * Register a form for a specific instance.  Parameters: - **body**: Request body containing form details   - **key**: Key of the form   - **data**: Form data   - **schema_uid**: UID of the schema  Returns: - **201**: Form registered successfully
     * @param instanceId  (required)
     * @param registerFormRequest  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> registerFormInstancesInstanceIdFormsPostWithHttpInfo(UUID instanceId, RegisterFormRequest registerFormRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = registerFormInstancesInstanceIdFormsPostValidateBeforeCall(instanceId, registerFormRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register Form (asynchronously)
     * Register a form for a specific instance.  Parameters: - **body**: Request body containing form details   - **key**: Key of the form   - **data**: Form data   - **schema_uid**: UID of the schema  Returns: - **201**: Form registered successfully
     * @param instanceId  (required)
     * @param registerFormRequest  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerFormInstancesInstanceIdFormsPostAsync(UUID instanceId, RegisterFormRequest registerFormRequest, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerFormInstancesInstanceIdFormsPostValidateBeforeCall(instanceId, registerFormRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDelete
     * @param instanceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteCall(UUID instanceId, UUID accountId, UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/instances/{instance_id}/collaborators"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteValidateBeforeCall(UUID instanceId, UUID accountId, UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDelete(Async)");
        }

        return removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteCall(instanceId, accountId, teamId, authorization, _callback);

    }

    /**
     * Remove Collaborator
     * Remove a collaborator from an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDelete(UUID instanceId, UUID accountId, UUID teamId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteWithHttpInfo(instanceId, accountId, teamId, authorization);
        return localVarResp.getData();
    }

    /**
     * Remove Collaborator
     * Remove a collaborator from an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteWithHttpInfo(UUID instanceId, UUID accountId, UUID teamId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteValidateBeforeCall(instanceId, accountId, teamId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Collaborator (asynchronously)
     * Remove a collaborator from an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteAsync(UUID instanceId, UUID accountId, UUID teamId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCollaboratorAccessV2InstancesInstanceIdCollaboratorsDeleteValidateBeforeCall(instanceId, accountId, teamId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDelete
     * @param spaceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteCall(UUID spaceId, UUID accountId, UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/collaborators"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteValidateBeforeCall(UUID spaceId, UUID accountId, UUID teamId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDelete(Async)");
        }

        return removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteCall(spaceId, accountId, teamId, authorization, _callback);

    }

    /**
     * Remove Space Collaborator
     * Remove a collaborator (account or team) from a space.  Parameters: - **space_id**: ID of the space to remove the collaborator from - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed from space successfully - **400**: Invalid input (e.g., both account_id and team_id provided or neither provided)
     * @param spaceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDelete(UUID spaceId, UUID accountId, UUID teamId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteWithHttpInfo(spaceId, accountId, teamId, authorization);
        return localVarResp.getData();
    }

    /**
     * Remove Space Collaborator
     * Remove a collaborator (account or team) from a space.  Parameters: - **space_id**: ID of the space to remove the collaborator from - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed from space successfully - **400**: Invalid input (e.g., both account_id and team_id provided or neither provided)
     * @param spaceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteWithHttpInfo(UUID spaceId, UUID accountId, UUID teamId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteValidateBeforeCall(spaceId, accountId, teamId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Space Collaborator (asynchronously)
     * Remove a collaborator (account or team) from a space.  Parameters: - **space_id**: ID of the space to remove the collaborator from - **account_id**: UUID of the account to remove (mutually exclusive with team_id) - **team_id**: UUID of the team to remove (mutually exclusive with account_id)  Returns: - **200**: Collaborator removed from space successfully - **400**: Invalid input (e.g., both account_id and team_id provided or neither provided)
     * @param spaceId  (required)
     * @param accountId  (optional)
     * @param teamId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteAsync(UUID spaceId, UUID accountId, UUID teamId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsDeleteValidateBeforeCall(spaceId, accountId, teamId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDelete
     * @param teamId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteCall(UUID teamId, UUID accountId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}/members/{account_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteValidateBeforeCall(UUID teamId, UUID accountId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDelete(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDelete(Async)");
        }

        return removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteCall(teamId, accountId, authorization, _callback);

    }

    /**
     * Remove Team Member
     * Remove a member from a team.  Parameters: - **team_id**: UUID of the team to remove the member from - **account_id**: UUID of the account to remove from the team  Returns: - **200**: Team member removed successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDelete(UUID teamId, UUID accountId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteWithHttpInfo(teamId, accountId, authorization);
        return localVarResp.getData();
    }

    /**
     * Remove Team Member
     * Remove a member from a team.  Parameters: - **team_id**: UUID of the team to remove the member from - **account_id**: UUID of the account to remove from the team  Returns: - **200**: Team member removed successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteWithHttpInfo(UUID teamId, UUID accountId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteValidateBeforeCall(teamId, accountId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Team Member (asynchronously)
     * Remove a member from a team.  Parameters: - **team_id**: UUID of the team to remove the member from - **account_id**: UUID of the account to remove from the team  Returns: - **200**: Team member removed successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteAsync(UUID teamId, UUID accountId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTeamMemberAccessV2TeamsTeamIdMembersAccountIdDeleteValidateBeforeCall(teamId, accountId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferOwnershipInstancesInstanceIdOwnerHandlePatch
     * @param handle  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferOwnershipInstancesInstanceIdOwnerHandlePatchCall(String handle, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/owner/{handle}"
            .replace("{" + "handle" + "}", localVarApiClient.escapeString(handle.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferOwnershipInstancesInstanceIdOwnerHandlePatchValidateBeforeCall(String handle, UUID instanceId, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'handle' is set
        if (handle == null) {
            throw new ApiException("Missing the required parameter 'handle' when calling transferOwnershipInstancesInstanceIdOwnerHandlePatch(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling transferOwnershipInstancesInstanceIdOwnerHandlePatch(Async)");
        }

        return transferOwnershipInstancesInstanceIdOwnerHandlePatchCall(handle, instanceId, schemaId, authorization, _callback);

    }

    /**
     * Transfer Ownership
     * 
     * @param handle  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object transferOwnershipInstancesInstanceIdOwnerHandlePatch(String handle, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = transferOwnershipInstancesInstanceIdOwnerHandlePatchWithHttpInfo(handle, instanceId, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Transfer Ownership
     * 
     * @param handle  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> transferOwnershipInstancesInstanceIdOwnerHandlePatchWithHttpInfo(String handle, UUID instanceId, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = transferOwnershipInstancesInstanceIdOwnerHandlePatchValidateBeforeCall(handle, instanceId, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Ownership (asynchronously)
     * 
     * @param handle  (required)
     * @param instanceId  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferOwnershipInstancesInstanceIdOwnerHandlePatchAsync(String handle, UUID instanceId, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferOwnershipInstancesInstanceIdOwnerHandlePatchValidateBeforeCall(handle, instanceId, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatch
     * @param instanceId  (required)
     * @param updateCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchCall(UUID instanceId, UpdateCollaboratorRequestBody updateCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCollaboratorRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/instances/{instance_id}/collaborators"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchValidateBeforeCall(UUID instanceId, UpdateCollaboratorRequestBody updateCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatch(Async)");
        }

        // verify the required parameter 'updateCollaboratorRequestBody' is set
        if (updateCollaboratorRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateCollaboratorRequestBody' when calling updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatch(Async)");
        }

        return updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchCall(instanceId, updateCollaboratorRequestBody, authorization, _callback);

    }

    /**
     * Update Collaborator
     * Update a collaborator&#39;s permissions on an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param updateCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatch(UUID instanceId, UpdateCollaboratorRequestBody updateCollaboratorRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchWithHttpInfo(instanceId, updateCollaboratorRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Collaborator
     * Update a collaborator&#39;s permissions on an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param updateCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchWithHttpInfo(UUID instanceId, UpdateCollaboratorRequestBody updateCollaboratorRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchValidateBeforeCall(instanceId, updateCollaboratorRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Collaborator (asynchronously)
     * Update a collaborator&#39;s permissions on an instance.  Parameters: - **instance_id**: UUID of the instance (from URL path) - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided)  Requires admin access to the instance
     * @param instanceId  (required)
     * @param updateCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchAsync(UUID instanceId, UpdateCollaboratorRequestBody updateCollaboratorRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollaboratorAccessV2InstancesInstanceIdCollaboratorsPatchValidateBeforeCall(instanceId, updateCollaboratorRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param role  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchCall(UUID instanceId, UUID accountId, String role, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/collaborators/{account_id}"
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchValidateBeforeCall(UUID instanceId, UUID accountId, String role, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch(Async)");
        }

        return updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchCall(instanceId, accountId, role, authorization, _callback);

    }

    /**
     * Update Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param role  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatch(UUID instanceId, UUID accountId, String role, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchWithHttpInfo(instanceId, accountId, role, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Collaborator
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param role  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchWithHttpInfo(UUID instanceId, UUID accountId, String role, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchValidateBeforeCall(instanceId, accountId, role, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Collaborator (asynchronously)
     * 
     * @param instanceId  (required)
     * @param accountId  (required)
     * @param role  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchAsync(UUID instanceId, UUID accountId, String role, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollaboratorInstancesInstanceIdCollaboratorsAccountIdPatchValidateBeforeCall(instanceId, accountId, role, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchCall(String moduleName, String modelName, String uid, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/instances/{instance_id}/modules/{module_name}/{model_name}/{uid}"
            .replace("{" + "module_name" + "}", localVarApiClient.escapeString(moduleName.toString()))
            .replace("{" + "model_name" + "}", localVarApiClient.escapeString(modelName.toString()))
            .replace("{" + "uid" + "}", localVarApiClient.escapeString(uid.toString()))
            .replace("{" + "instance_id" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schemaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_id", schemaId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchValidateBeforeCall(String moduleName, String modelName, String uid, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleName' is set
        if (moduleName == null) {
            throw new ApiException("Missing the required parameter 'moduleName' when calling updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(Async)");
        }

        // verify the required parameter 'modelName' is set
        if (modelName == null) {
            throw new ApiException("Missing the required parameter 'modelName' when calling updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(Async)");
        }

        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(Async)");
        }

        return updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchCall(moduleName, modelName, uid, instanceId, body, schemaId, authorization, _callback);

    }

    /**
     * Update Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatch(String moduleName, String modelName, String uid, UUID instanceId, Object body, UUID schemaId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchWithHttpInfo(moduleName, modelName, uid, instanceId, body, schemaId, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Record
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchWithHttpInfo(String moduleName, String modelName, String uid, UUID instanceId, Object body, UUID schemaId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchValidateBeforeCall(moduleName, modelName, uid, instanceId, body, schemaId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Record (asynchronously)
     * 
     * @param moduleName  (required)
     * @param modelName  (required)
     * @param uid  (required)
     * @param instanceId  (required)
     * @param body  (required)
     * @param schemaId  (optional)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchAsync(String moduleName, String modelName, String uid, UUID instanceId, Object body, UUID schemaId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordInstancesInstanceIdModulesModuleNameModelNameUidPatchValidateBeforeCall(moduleName, modelName, uid, instanceId, body, schemaId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpaceAccessV2SpacesSpaceIdPatch
     * @param spaceId  (required)
     * @param updateSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceAccessV2SpacesSpaceIdPatchCall(UUID spaceId, UpdateSpaceRequestBody updateSpaceRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSpaceRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceAccessV2SpacesSpaceIdPatchValidateBeforeCall(UUID spaceId, UpdateSpaceRequestBody updateSpaceRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpaceAccessV2SpacesSpaceIdPatch(Async)");
        }

        // verify the required parameter 'updateSpaceRequestBody' is set
        if (updateSpaceRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateSpaceRequestBody' when calling updateSpaceAccessV2SpacesSpaceIdPatch(Async)");
        }

        return updateSpaceAccessV2SpacesSpaceIdPatchCall(spaceId, updateSpaceRequestBody, authorization, _callback);

    }

    /**
     * Update Space
     * Update a space&#39;s details.  Parameters: - **space_id**: ID of the space to update - **body**: Request body containing updated space details   - **name**: Optional new name for the space   - **description**: Optional new description for the space  Returns: - **200**: Space updated successfully
     * @param spaceId  (required)
     * @param updateSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSpaceAccessV2SpacesSpaceIdPatch(UUID spaceId, UpdateSpaceRequestBody updateSpaceRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateSpaceAccessV2SpacesSpaceIdPatchWithHttpInfo(spaceId, updateSpaceRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Space
     * Update a space&#39;s details.  Parameters: - **space_id**: ID of the space to update - **body**: Request body containing updated space details   - **name**: Optional new name for the space   - **description**: Optional new description for the space  Returns: - **200**: Space updated successfully
     * @param spaceId  (required)
     * @param updateSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSpaceAccessV2SpacesSpaceIdPatchWithHttpInfo(UUID spaceId, UpdateSpaceRequestBody updateSpaceRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceAccessV2SpacesSpaceIdPatchValidateBeforeCall(spaceId, updateSpaceRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Space (asynchronously)
     * Update a space&#39;s details.  Parameters: - **space_id**: ID of the space to update - **body**: Request body containing updated space details   - **name**: Optional new name for the space   - **description**: Optional new description for the space  Returns: - **200**: Space updated successfully
     * @param spaceId  (required)
     * @param updateSpaceRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceAccessV2SpacesSpaceIdPatchAsync(UUID spaceId, UpdateSpaceRequestBody updateSpaceRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceAccessV2SpacesSpaceIdPatchValidateBeforeCall(spaceId, updateSpaceRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatch
     * @param spaceId  (required)
     * @param updateSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchCall(UUID spaceId, UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSpaceCollaboratorRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/spaces/{space_id}/collaborators"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchValidateBeforeCall(UUID spaceId, UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatch(Async)");
        }

        // verify the required parameter 'updateSpaceCollaboratorRequestBody' is set
        if (updateSpaceCollaboratorRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateSpaceCollaboratorRequestBody' when calling updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatch(Async)");
        }

        return updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchCall(spaceId, updateSpaceCollaboratorRequestBody, authorization, _callback);

    }

    /**
     * Update Space Collaborator
     * Update a collaborator&#39;s permissions in a space.  Parameters: - **space_id**: ID of the space to update the collaborator in - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **404**: Collaborator not found in space
     * @param spaceId  (required)
     * @param updateSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatch(UUID spaceId, UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchWithHttpInfo(spaceId, updateSpaceCollaboratorRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Space Collaborator
     * Update a collaborator&#39;s permissions in a space.  Parameters: - **space_id**: ID of the space to update the collaborator in - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **404**: Collaborator not found in space
     * @param spaceId  (required)
     * @param updateSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchWithHttpInfo(UUID spaceId, UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchValidateBeforeCall(spaceId, updateSpaceCollaboratorRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Space Collaborator (asynchronously)
     * Update a collaborator&#39;s permissions in a space.  Parameters: - **space_id**: ID of the space to update the collaborator in - **body**: Request body containing collaborator details   - **account_id**: UUID of the account to update (mutually exclusive with team_id)   - **team_id**: UUID of the team to update (mutually exclusive with account_id)   - **role**: Role of the collaborator  Returns: - **200**: Collaborator updated successfully - **400**: Invalid input (e.g., both account_id and team_id provided) - **404**: Collaborator not found in space
     * @param spaceId  (required)
     * @param updateSpaceCollaboratorRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchAsync(UUID spaceId, UpdateSpaceCollaboratorRequestBody updateSpaceCollaboratorRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceCollaboratorAccessV2SpacesSpaceIdCollaboratorsPatchValidateBeforeCall(spaceId, updateSpaceCollaboratorRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamAccessV2TeamsTeamIdPatch
     * @param teamId  (required)
     * @param updateTeamRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamAccessV2TeamsTeamIdPatchCall(UUID teamId, UpdateTeamRequestBody updateTeamRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamAccessV2TeamsTeamIdPatchValidateBeforeCall(UUID teamId, UpdateTeamRequestBody updateTeamRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateTeamAccessV2TeamsTeamIdPatch(Async)");
        }

        // verify the required parameter 'updateTeamRequestBody' is set
        if (updateTeamRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateTeamRequestBody' when calling updateTeamAccessV2TeamsTeamIdPatch(Async)");
        }

        return updateTeamAccessV2TeamsTeamIdPatchCall(teamId, updateTeamRequestBody, authorization, _callback);

    }

    /**
     * Update Team
     * Update a team&#39;s details.  Parameters: - **team_id**: UUID of the team to update - **body**: Request body containing updated team details   - **name**: Optional new name for the team   - **description**: Optional new description for the team  Returns: - **200**: Team updated successfully
     * @param teamId  (required)
     * @param updateTeamRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateTeamAccessV2TeamsTeamIdPatch(UUID teamId, UpdateTeamRequestBody updateTeamRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateTeamAccessV2TeamsTeamIdPatchWithHttpInfo(teamId, updateTeamRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Team
     * Update a team&#39;s details.  Parameters: - **team_id**: UUID of the team to update - **body**: Request body containing updated team details   - **name**: Optional new name for the team   - **description**: Optional new description for the team  Returns: - **200**: Team updated successfully
     * @param teamId  (required)
     * @param updateTeamRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateTeamAccessV2TeamsTeamIdPatchWithHttpInfo(UUID teamId, UpdateTeamRequestBody updateTeamRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateTeamAccessV2TeamsTeamIdPatchValidateBeforeCall(teamId, updateTeamRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Team (asynchronously)
     * Update a team&#39;s details.  Parameters: - **team_id**: UUID of the team to update - **body**: Request body containing updated team details   - **name**: Optional new name for the team   - **description**: Optional new description for the team  Returns: - **200**: Team updated successfully
     * @param teamId  (required)
     * @param updateTeamRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamAccessV2TeamsTeamIdPatchAsync(UUID teamId, UpdateTeamRequestBody updateTeamRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamAccessV2TeamsTeamIdPatchValidateBeforeCall(teamId, updateTeamRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch
     * @param teamId  (required)
     * @param accountId  (required)
     * @param updateTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchCall(UUID teamId, UUID accountId, UpdateTeamMemberRequestBody updateTeamMemberRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamMemberRequestBody;

        // create path and map variables
        String localVarPath = "/access_v2/teams/{team_id}/members/{account_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchValidateBeforeCall(UUID teamId, UUID accountId, UpdateTeamMemberRequestBody updateTeamMemberRequestBody, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch(Async)");
        }

        // verify the required parameter 'updateTeamMemberRequestBody' is set
        if (updateTeamMemberRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateTeamMemberRequestBody' when calling updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch(Async)");
        }

        return updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchCall(teamId, accountId, updateTeamMemberRequestBody, authorization, _callback);

    }

    /**
     * Update Team Member
     * Update a team member&#39;s details.  Parameters: - **team_id**: UUID of the team the member belongs to - **account_id**: UUID of the account to update - **body**: Request body containing updated member details   - **role**: Role of the member in the team  Returns: - **200**: Team member updated successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param updateTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatch(UUID teamId, UUID accountId, UpdateTeamMemberRequestBody updateTeamMemberRequestBody, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchWithHttpInfo(teamId, accountId, updateTeamMemberRequestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * Update Team Member
     * Update a team member&#39;s details.  Parameters: - **team_id**: UUID of the team the member belongs to - **account_id**: UUID of the account to update - **body**: Request body containing updated member details   - **role**: Role of the member in the team  Returns: - **200**: Team member updated successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param updateTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchWithHttpInfo(UUID teamId, UUID accountId, UpdateTeamMemberRequestBody updateTeamMemberRequestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchValidateBeforeCall(teamId, accountId, updateTeamMemberRequestBody, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Team Member (asynchronously)
     * Update a team member&#39;s details.  Parameters: - **team_id**: UUID of the team the member belongs to - **account_id**: UUID of the account to update - **body**: Request body containing updated member details   - **role**: Role of the member in the team  Returns: - **200**: Team member updated successfully - **404**: Member not found in team
     * @param teamId  (required)
     * @param accountId  (required)
     * @param updateTeamMemberRequestBody  (required)
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchAsync(UUID teamId, UUID accountId, UpdateTeamMemberRequestBody updateTeamMemberRequestBody, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamMemberAccessV2TeamsTeamIdMembersAccountIdPatchValidateBeforeCall(teamId, accountId, updateTeamMemberRequestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
