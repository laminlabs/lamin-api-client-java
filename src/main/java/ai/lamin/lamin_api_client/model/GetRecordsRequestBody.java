/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ai.lamin.lamin_api_client.model;

import java.util.Objects;
import ai.lamin.lamin_api_client.model.OrderByColumn;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.lamin.lamin_api_client.JSON;

/**
 * GetRecordsRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T10:23:42.127510575+02:00[Europe/Brussels]", comments = "Generator version: 7.12.0")
public class GetRecordsRequestBody {
  public static final String SERIALIZED_NAME_SELECT = "select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  @javax.annotation.Nullable
  private List<String> select;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private Map<String, Object> filter;

  public static final String SERIALIZED_NAME_ORDER_BY = "order_by";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  @javax.annotation.Nullable
  private List<OrderByColumn> orderBy;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  @javax.annotation.Nullable
  private String search = "";

  public GetRecordsRequestBody() {
  }

  public GetRecordsRequestBody select(@javax.annotation.Nullable List<String> select) {
    this.select = select;
    return this;
  }

  public GetRecordsRequestBody addSelectItem(String selectItem) {
    if (this.select == null) {
      this.select = new ArrayList<>();
    }
    this.select.add(selectItem);
    return this;
  }

  /**
   * Get select
   * @return select
   */
  @javax.annotation.Nullable
  public List<String> getSelect() {
    return select;
  }

  public void setSelect(@javax.annotation.Nullable List<String> select) {
    this.select = select;
  }


  public GetRecordsRequestBody filter(@javax.annotation.Nullable Map<String, Object> filter) {
    this.filter = filter;
    return this;
  }

  public GetRecordsRequestBody putFilterItem(String key, Object filterItem) {
    if (this.filter == null) {
      this.filter = new HashMap<>();
    }
    this.filter.put(key, filterItem);
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Map<String, Object> getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable Map<String, Object> filter) {
    this.filter = filter;
  }


  public GetRecordsRequestBody orderBy(@javax.annotation.Nullable List<OrderByColumn> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public GetRecordsRequestBody addOrderByItem(OrderByColumn orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

  /**
   * Get orderBy
   * @return orderBy
   */
  @javax.annotation.Nullable
  public List<OrderByColumn> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(@javax.annotation.Nullable List<OrderByColumn> orderBy) {
    this.orderBy = orderBy;
  }


  public GetRecordsRequestBody search(@javax.annotation.Nullable String search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public String getSearch() {
    return search;
  }

  public void setSearch(@javax.annotation.Nullable String search) {
    this.search = search;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecordsRequestBody getRecordsRequestBody = (GetRecordsRequestBody) o;
    return Objects.equals(this.select, getRecordsRequestBody.select) &&
        Objects.equals(this.filter, getRecordsRequestBody.filter) &&
        Objects.equals(this.orderBy, getRecordsRequestBody.orderBy) &&
        Objects.equals(this.search, getRecordsRequestBody.search);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(select, filter, orderBy, search);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecordsRequestBody {\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("select");
    openapiFields.add("filter");
    openapiFields.add("order_by");
    openapiFields.add("search");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRecordsRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecordsRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecordsRequestBody is not found in the empty JSON string", GetRecordsRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecordsRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecordsRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("select") != null && !jsonObj.get("select").isJsonNull() && !jsonObj.get("select").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `select` to be an array in the JSON string but got `%s`", jsonObj.get("select").toString()));
      }
      if (jsonObj.get("order_by") != null && !jsonObj.get("order_by").isJsonNull()) {
        JsonArray jsonArrayorderBy = jsonObj.getAsJsonArray("order_by");
        if (jsonArrayorderBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_by").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_by` to be an array in the JSON string but got `%s`", jsonObj.get("order_by").toString()));
          }

          // validate the optional field `order_by` (array)
          for (int i = 0; i < jsonArrayorderBy.size(); i++) {
            OrderByColumn.validateJsonElement(jsonArrayorderBy.get(i));
          };
        }
      }
      if ((jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) && !jsonObj.get("search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecordsRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecordsRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecordsRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecordsRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecordsRequestBody>() {
           @Override
           public void write(JsonWriter out, GetRecordsRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecordsRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRecordsRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRecordsRequestBody
   * @throws IOException if the JSON string is invalid with respect to GetRecordsRequestBody
   */
  public static GetRecordsRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecordsRequestBody.class);
  }

  /**
   * Convert an instance of GetRecordsRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

